
-----------------------------------Game_Temp / System / Party ----------------------------

#==============================================================================
# ¦ Game_Temp
#==============================================================================
class Game_Temp
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_accessor :in_srpg                # ?????????????
  attr_accessor :in_srpg_equip          # SRPG?????????
  attr_accessor :unit_back_attack       # ?????????????
  attr_accessor :refresh_status_window  # ???????????????
  attr_accessor :srpg_end               # SRPG?????
  attr_accessor :common_event_user      # ??????????ID
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  alias srpg_game_temp_initialize initialize
  def initialize
    srpg_game_temp_initialize
    @in_srpg          = false
    @in_srpg_equip    = false
    @unit_back_attack = false
    @refresh_status_window = nil    # ?????????
    @srpg_end = false
    @common_event_user = nil
  end
end

#==============================================================================
# ¦ Game_System
#==============================================================================
class Game_System
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_accessor :in_srpg                  # SRPG??????
  attr_accessor :srpg_member              # ?????????
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  alias tsrpg_game_system_initialize initialize
  def initialize
    tsrpg_game_system_initialize
    @in_srpg = false
    @srpg_member = []
  end
end

#==============================================================================
# ¦ Game_Party
#==============================================================================
class Game_Party < Game_Unit
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  MAX_MEMBERS = 99                         # ????????
  #--------------------------------------------------------------------------
  # ? ???????????
  #     item : ????
  #--------------------------------------------------------------------------
  def item_can_use?(item)
    return false unless item.is_a?(RPG::Item)
    return false if item_number(item) == 0
    if $game_temp.in_battle or $game_temp.in_srpg
      if item.nomove?    # ???????????????????????
        return false if $scene.event != nil and $scene.event.move_end
      end
      return item.battle_ok?
    else
      return item.menu_ok?
    end
  end
end

-----------------------------------Game_Srpg ----------------------------

#==============================================================================
# ¦ Game_Srpg
#==============================================================================
class Game_Srpg < Game_Map
  #--------------------------------------------------------------------------
  # ? ??????????
  #update1.008
  #--------------------------------------------------------------------------
  attr_reader   :alive_actor_num          # ???????????????
  attr_reader   :alive_enemy_num          # ???????????????
  attr_reader   :popups                   # ????????????
  attr_accessor :scene_state              # SRPG???
  attr_accessor :map_pass_normal
  attr_accessor :map_pass_spider
  attr_accessor :map_pass_float
  attr_accessor :map_pass_submarine
  attr_accessor :talker_pos               # ??????????????
  #--------------------------------------------------------------------------
  # ? ????????????????
  #--------------------------------------------------------------------------
  LETTER_TABLE = [ 'A','B','C','D','E','F','G','H','I','J',
                   'K','L','M','N','O','P','Q','R','S','T',
                   'U','V','W','X','Y','Z']
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def initialize
    @screen = Game_Screen.new
    @interpreter = Game_SrpgInterpreter.new(0, true)
    @map_id = 0
    @display_x = 0
    @display_y = 0
    @scene_state = 0
    @actor_list = []
    @enemy_list = []
    @popups = []
    for i in 0...16 do @popups.push(Game_Popup.new) end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #     map_id : ??? ID
  #update1.004
  #--------------------------------------------------------------------------
  def setup(map_id)
    $removal = []
    @actor_list = []
    $game_troop.setup(1)                        # ?????????????
    @map_id = map_id
    @map = load_data(sprintf("Data/Map%03d.rvdata", @map_id))
    @display_x = 0
    @display_y = 0
    @passages = $data_system.passages
    setup_events
    setup_scroll
    setup_parallax
    setup_pass_table                            # ???????????
    setup_unit_list                             # ??????????
    @need_refresh = false
    @scene_state = 0
    $game_variables[TSRPG::CHANGE_TURN] = 1     # ?????????
    $game_variables[TSRPG::TURN_COUNT]  = 0     # ??????
    $game_variables[TSRPG::GAME_RESULT] = 0     # ????
    $game_cursor = Game_Cursor.new
    autoplay                                    # BGM ? BGS ???????
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def setup_events
    @events = {}          # ???????
    for i in @map.events.keys
     @events[i] = Game_SrpgEvent.new(@map_id, @map.events[i])
    end
    @common_events = {}   # ???????
    for i in 1...$data_common_events.size
      @common_events[i] = Game_CommonEvent.new(i)
    end
  end
  #--------------------------------------------------------------------------
  # ? ???(?????)????????????
  #update1.011
  #--------------------------------------------------------------------------
  def setup_pass_table
    @map_pass_normal = Table.new(width + 2, height + 2)
    @map_pass_spider = Table.new(width + 2, height + 2)
    @map_pass_float  = Table.new(width + 2, height + 2)
    @map_pass_submarine = Table.new(width + 2, height + 2)
    for x in 1..width
      for y in 1..height
        @map_pass_normal[x, y] = 1 if tile_passable?(x - 1, y - 1)
        @map_pass_submarine[x, y] = 1 if tile_passable?(x - 1, y - 1, 0x04)
        if @map_pass_normal[x, y] == 1 or @map_pass_submarine[x, y] == 1
          @map_pass_spider[x, y] = 1
        end
        @map_pass_float[x, y] = 1
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #     x    : X ??
  #     y    : Y ??
  #     flag : ?????
  #--------------------------------------------------------------------------
  def tile_passable?(x, y, flag = 0x01)
    for i in [2, 1, 0]                      # ?????????????
      tile_id = @map.data[x, y, i]          # ??? ID ???
      return false if tile_id == nil        # ??? ID ???? : ????
      pass = @passages[tile_id]             # ???????
      next if pass & 0x10 == 0x10           # [?] : ????????
      return true if pass & flag == 0x00    # [?] : ???
      return false if pass & flag == flag   # [×] : ????
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def setup_unit_list
    @actor_list = []
    @enemy_list = []
    @names_count = {}
    keys = @events.keys
    for key in keys.sort
      event = @events[key]
      next if event.enemy_id < 0
      if event.enemy_flag
        @enemy_list.push(event)
      else
        @actor_list.push(event)
      end
    end
    update_alive_unit_count         # ????????????
    #make_unique_names               # ???????????????????
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def add_actor(event_id, member_id)
    return if $game_system.srpg_member[member_id] == nil
    event = @events[event_id]       # ???????
    set_unit_appear_pos(event)      # ???????
    @actor_list.push(event)         # ??????????
    event.set_actor(member_id)      # ???????????????????
    update_alive_unit_count         # ????????????
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def add_enemy(event_id, enemy_id)
    event = @events[event_id]       # ???????
    unless event.enemy_flag         # ???????????
      set_unit_appear_pos(event)      # ???????
      @enemy_list.push(event)         # ??????????
    end
    event.set_enemy(enemy_id)       # ???????????????????
    #make_unique_names               # ???????????????????
    update_alive_unit_count         # ????????????
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def set_unit_appear_pos(event)
    x, y = event.x, event.y
    while(alive_unit_xy(x, y) != nil)
      if @map_pass_normal[x, y - 1] == 1
        y -= 1
      elsif @map_pass_normal[x + 1, y] == 1
        x += 1
      elsif @map_pass_normal[x, y + 1] == 1
        y += 1
      else
        x -= 1
      end
    end
    event.moveto(x, y)
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def unit_list
    return @actor_list + @enemy_list
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  def alive_actor_list
    result = []
    for event in @actor_list
      if (!event.unit.nil?)
        result.push(event) unless event.unit.dead?
      end
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  def confuse_actor_list
    result = []
    for event in @actor_list
      result.push(event) if event.unit.confusion? or event.unit.berserker?
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  def alive_enemy_list
    result = []
    for event in @enemy_list
      result.push(event) unless event.unit.dead?
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #--------------------------------------------------------------------------
  def alive_unit_list
    return alive_actor_list + alive_enemy_list
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #     x : X ??
  #     y : Y ??
  #--------------------------------------------------------------------------
  def events_xy(x, y)
    result = []
    for event in @events.values
      result.push(event) if event.pos?(x, y)
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #   alive_only ? false ???????????????
  #--------------------------------------------------------------------------
  def alive_unit_xy(x, y, alive_only = true)
    units = alive_only ? alive_unit_list : unit_list
    for event in units
      return event if event.pos?(x, y)
    end
    return nil
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????????
  #--------------------------------------------------------------------------
  def target_xy(x, y)
    result = []
    #for all listed unts, loop through the array and add to
    #result array if the event is in scope
    for event in unit_list
      result.push(event) if event.pos?(x, y) and event.in_scope?
    end
    begin
        $game_variables[TSRPG::TARGET_EVENT_ID] = result[0]
        $game_variables[TSRPG::TARGETED_ENEMY_HP] = result[0].unit.hp
        $game_variables[TSRPG::TARGETED_EN_MAX_HP] = result[0].unit.maxhp 
    rescue Exception=>e
        # multi target spell. do nothing.
    end   
    return result
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def update_alive_unit_count
    @alive_actor_num = 0
    @alive_enemy_num = 0
    for event in alive_unit_list
      next if event.npc or event.pnpc       # NPC?PNPC????????
      if event.enemy_flag
        @alive_enemy_num += 1
      else
        @alive_actor_num += 1
      end
    end
    $game_variables[TSRPG::ACTOR_NUM] = @alive_actor_num
    $game_variables[TSRPG::ENEMY_NUM] = @alive_enemy_num
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????
  #--------------------------------------------------------------------------
  def make_unique_names
    for event in @enemy_list
      next unless event.unit.exist?
      next unless event.unit.letter.empty?
      n = @names_count[event.unit.original_name]
      n = 0 if n == nil
      event.unit.letter = LETTER_TABLE[n % LETTER_TABLE.size]
      @names_count[event.unit.original_name] = n + 1
    end
    for event in @enemy_list
      n = @names_count[event.unit.original_name]
      n = 0 if n == nil
      event.unit.plural = true if n >= 2
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def enemy_turn?
    return @scene_state >= 100
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def change_turn
    $game_temp.unit_back_attack = false   # ?????????????
    for event in unit_list do event.refresh_turn end
    if enemy_turn?                        # ????????????
      $game_troop.increase_turn             # ?????
      $game_variables[TSRPG::TURN_COUNT] = $game_troop.turn_count
      @scene_state = 0                      # ????????????????
      $game_variables[TSRPG::CHANGE_TURN] = 1
    else                                  # ????????????
      @scene_state = 100                    # ????????????????
      $game_variables[TSRPG::CHANGE_TURN] = 2
    end
    @need_refresh = true
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def tile_effect(x, y)
    for i in [2, 1, 0]
      id = @map.data[x, y, i]
      next if id == 0
      return id if TSRPG::TILE_EFFECT.include?(id)
    end
    return 0
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def popup_action_result(event, obj = nil)
    target = event.unit
    x, y = event.real_x, event.real_y
    if target.skipped or target.missed or target.evaded
      text = "MISS"
      color = event.enemy_flag ? TSRPG::COLOR_ACTOR_HP_DAMAGE :
      TSRPG::COLOR_ENEMY_HP_DAMAGE
    else
      if target.mp_damage == 0
        if obj.is_a?(RPG::BaseItem) and target.hp_damage == 0 and obj.base_damage == 0
          text = ""
        elsif target.hp_damage < 0
          text = (0 - target.hp_damage).to_s
          color = TSRPG::COLOR_HP_GAIN
        else
          text = target.hp_damage.to_s
          color = event.enemy_flag ? TSRPG::COLOR_ENEMY_HP_DAMAGE :
          TSRPG::COLOR_ACTOR_HP_DAMAGE
        end
      else
        if target.mp_damage < 0
          text = (0 - target.mp_damage).to_s
          color = TSRPG::COLOR_MP_GAIN
        else
          text = target.mp_damage.to_s
          color = event.enemy_flag ? TSRPG::COLOR_ENEMY_MP_DAMAGE :
          TSRPG::COLOR_ACTOR_MP_DAMAGE
        end
      end
      effect_y = y - (24 << 3)
      if target.critical                # ????????
        add_popup(x, effect_y, Vocab::cri_action, TSRPG::COLOR_CRITICAL)
        effect_y -= (24 << 3)
      end
      if $game_temp.unit_back_attack    # ?????????
        if target.hp_damage != 0 or target.mp_damage != 0
          add_popup(x, effect_y, Vocab::back_attack, TSRPG::COLOR_BACK_ATTACK)
        end
      end
    end
    add_popup(x, y, text, color) if text != ""
    i = 0
    # ??????
    for state in target.added_states
      add_popup(x, y - i * 160, state.name, TSRPG::COLOR_ADD_STATE, 1)
      i += 1
    end
    # ??????
    for state in target.removed_states
      add_popup(x, y - i * 160, state.name, TSRPG::COLOR_REMOVE_STATE, 1)
      i += 1
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def add_popup(x, y, text, color, type = 0)
    for popup in @popups
      if popup.erased?
        popup.setup(x, y, text, color, type)
        break
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    refresh if @need_refresh
    update_scroll
    update_events
    for popup in @popups do popup.update end
    update_parallax
    @screen.update
  end
end

----------------------------------------Game_Battler------------------------------
#==============================================================================
# ¦ Game_Battler
#==============================================================================
class Game_Battler
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  alias tsrpg_game_battler_initialize initialize
  def initialize
    tsrpg_game_battler_initialize
    @tile_effect = 0        # ???????(???ID)
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  alias tsrpg_game_battler_states states
  def states
    result = tsrpg_game_battler_states
    return result unless $game_temp.in_srpg   # SRPG??????????
    for i in result                           # ????????
      return result if i.note =~ TSRPG::Pattern::FLOAT
    end
    for pattern in TSRPG::TILE_EFFECT[@tile_effect][1] # ?????????
      effect = TSRPG::TILE_EFFECT_PATTERN[pattern]
      if effect[0] > 100                      # ????????????
        result.push($data_states[effect[0] - 100])
      end
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def atk
    n = [[base_atk + @atk_plus, 1].max, 999].min
    for state in states do n *= state.atk_rate / 100.0 end
    n = apply_tile_effect(n, TSRPG::ATK)      # ????????????
    n = [[Integer(n), 1].max, 999].min
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def def
    n = [[base_def + @def_plus, 1].max, 999].min
    for state in states do n *= state.def_rate / 100.0 end
    n = apply_tile_effect(n, TSRPG::DEF)      # ????????????
    n = [[Integer(n), 1].max, 999].min
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def spi
    n = [[base_spi + @spi_plus, 1].max, 999].min
    for state in states do n *= state.spi_rate / 100.0 end
    n = apply_tile_effect(n, TSRPG::SPI)      # ????????????
    n = [[Integer(n), 1].max, 999].min
    return n
  end
  #--------------------------------------------------------------------------
  # ? ???(???)???
  #--------------------------------------------------------------------------
  def agi
    n = [[base_agi + @agi_plus, 0].max, 999].min
    for state in states do n += state.move_power end
    n = apply_tile_effect(n, TSRPG::AGI)      # ????????????
    n = [[Integer(n), 0].max, 999].min
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def move_power
    return agi
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def counter_power
    n = base_counter_power
    n = apply_tile_effect(n, TSRPG::CNT)      # ????????????
    for state in states do n += state.counter_power end
    return [[n, 0].max, 100].min
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def coop_power
    n = base_coop_power
    n = apply_tile_effect(n, TSRPG::COP)      # ????????????
    for state in states do n += state.coop_power end
    return [[n, 0].max, 100].min
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def float?
    for state in states
      return true if state.note =~ TSRPG::Pattern::FLOAT
    end
    return false
  end
  
  def regen?
    for state in states
      return true if state.note =~ TSRPG::Pattern::REGEN
    end
    return false
  end
  
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def spider?
    for state in states
      return true if state.note =~ TSRPG::Pattern::SPIDER
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.011
  #--------------------------------------------------------------------------
  def submarine?
    for state in states
      return true if state.note =~ TSRPG::Pattern::SUBMARINE
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def donmove?
    for state in states
      return true if state.note =~ TSRPG::Pattern::DONMOVE
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def donact?
    for state in states
      return true if state.note =~ TSRPG::Pattern::DONACT
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def reflect?
    for state in states
      return true if state.reflect?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????MP???????
  #--------------------------------------------------------------------------
  def change_damage?
    for state in states
      return true if state.change_damage?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def donevade?
    for state in states
      return true if state.donevade?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def zombie?
    for state in states
      return true if state.zombie?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def donback?
    for state in states
      return true if state.donback?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????????
  # update1.008
  #--------------------------------------------------------------------------
  def guts?
    for state in states
      return true if state.guts?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????(???????????)
  #--------------------------------------------------------------------------
  def weight
    return nil
  end
  #--------------------------------------------------------------------------
  # ? ?????????(???????????)
  #--------------------------------------------------------------------------
  def over_weight?
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #   flag : ??????????(?????????????????)
  #--------------------------------------------------------------------------
  def move_end_for_state(flag = true)
    return (donmove? or ((confusion? or berserker?) and flag) or !movable?)
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #   flag : ??????????(?????????????????)
  #--------------------------------------------------------------------------
  def action_end_for_state(flag = true)
    return (donact? or ((confusion? or berserker?) and flag) or !movable?)
  end
  #--------------------------------------------------------------------------
  # ? ??????????? ID ???
  #--------------------------------------------------------------------------
  def animation_id
    return atk_animation_id
  end
  #--------------------------------------------------------------------------
  # ? ???????MP???
  #--------------------------------------------------------------------------
  def atk_mp_cost
    return 0
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #     skill : ???
  #--------------------------------------------------------------------------
  def skill_can_use?(skill)
    return false unless skill.is_a?(RPG::Skill)
    return false unless movable?
    return false if silent? and skill.spi_f > 0
    return false if calc_mp_cost(skill) > mp
    if $game_temp.in_battle or $game_temp.in_srpg
      if skill.nomove?    # ??????????????????????
        return false if $scene.event != nil and $scene.event.move_end
      end
      return skill.battle_ok?
    else
      return skill.menu_ok?
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #     user : ????????????
  #    ?????? @hp_damage?@mp_damage?@absorbed ???????????
  #update1.008
  #--------------------------------------------------------------------------
  def execute_damage(user)
    if @hp_damage > 0           # ????????
      remove_states_shock       # ???????????
      @hp_damage = [self.hp - 1, @hp_damage].min if guts? and self.hp > 1
    end
    if zombie?                  # ??????????????
      if @absorbed                # ?????
        self.hp += @hp_damage
        self.mp += @mp_damage
        user.hp -= @hp_damage
        user.mp -= @mp_damage
      else
        self.hp -= @hp_damage
        self.mp -= @mp_damage
      end
    else
      self.hp -= @hp_damage
      self.mp -= @mp_damage
      if @absorbed                # ?????
        user.hp += @hp_damage
        user.mp += @mp_damage
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #     user : ??????????????????
  #     obj  : ?????????? (???????? nil)
  #--------------------------------------------------------------------------
  def calc_hit(user, obj = nil)
    if obj == nil                           # ???????
      hit = user.hit                        # ??????
      physical = true
    elsif obj.is_a?(RPG::Skill)             # ??????
      hit = obj.donevade? ? 100 : obj.hit   # ??????
      physical = obj.physical_attack
    else                                    # ???????
      hit = 100                             # ???? 100% ???
      physical = obj.physical_attack
    end
    hit /= 2 if user.reduce_hit_ratio?      # user is blinded
    hit = 100 if user.donevade?             # moves like swift

    return hit
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #     user : ??????????????????
  #     obj  : ?????????? (???????? nil)
  #--------------------------------------------------------------------------
  def calc_eva(user, obj = nil)
    eva = self.eva
    if $game_temp.unit_back_attack          # ????????
      eva = [eva - TSRPG::BACK_ATTACK_BONUS_HIT, 0].max
    end
    unless obj == nil                       # ??????????
      eva = 0 unless obj.physical_attack    # ???????? 0% ???
      eva = 0 if obj.donevade?              # ??????? 0% ???
    end
    eva = 0 if user.donevade?               # ?????????? 0% ???
    eva = 0 unless parriable?               # ????????? 0% ???
    return eva
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #     attacker : ???
  #    ??? @hp_damage ??????
  #--------------------------------------------------------------------------
  def make_attack_damage_value(attacker)
    damage = attacker.atk * 4 - self.def * 2        # ????
    if $game_temp.in_srpg
      if $game_temp.unit_back_attack        # ????????
        damage += damage * TSRPG::BACK_ATTACK_BONUS / 100
      end
    end
    damage /= 2 if attacker.mp < attacker.atk_mp_cost # MP??????????
    damage = 0 if damage < 0                        # ?????? 0 ?
    damage *= elements_max_rate(attacker.element_set)   # ????
    damage /= 100
    if damage == 0                                  # ????? 0
      damage = rand(2)                              # 1/2 ???? 1 ????
    elsif damage > 0                                # ????????
      @critical = (rand(100) < attacker.cri)        # ????????
      @critical = false if prevent_critical         # ?????????
      damage *= 3 if @critical                      # ????????
    end
    damage = apply_variance(damage, 20)             # ??
    damage = apply_guard(damage)                    # ????
    if change_damage? and self.mp > 0       # ????MP?????
      @mp_damage = damage                           # MP ?????
    else
      @hp_damage = damage                           # HP ?????
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????
  #     user : ??????????????
  #     obj  : ??????????
  #    ??? @hp_damage ??? @mp_damage ??????
  #--------------------------------------------------------------------------
  def make_obj_damage_value(user, obj)
    damage = obj.base_damage                        # ?????????
    if damage > 0                                   # ????????
      damage += user.atk * 4 * obj.atk_f / 100      # ?????: ???
      damage += user.spi * 2 * obj.spi_f / 100      # ?????: ???
      if $game_temp.in_srpg
        if $game_temp.unit_back_attack        # ????????
          damage += damage * TSRPG::BACK_ATTACK_BONUS / 100
        end
      end
      unless obj.ignore_defense                     # ???????
        damage -= self.def * 2 * obj.atk_f / 100    # ?????: ???
        damage -= self.spi * 1 * obj.spi_f / 100    # ?????: ???
      end
      damage = 0 if damage < 0                      # ?????? 0 ?
    elsif damage < 0                                # ????????
      damage -= user.atk * 4 * obj.atk_f / 100      # ?????: ???
      damage -= user.spi * 2 * obj.spi_f / 100      # ?????: ???
      damage = 0 - damage if zombie?                # ???????????
    end
    damage *= elements_max_rate(obj.element_set)    # ????
    damage /= 100
    damage = apply_variance(damage, obj.variance)   # ??
    damage = apply_guard(damage)                    # ????
    if obj.damage_to_mp
      if (change_damage?)
        @hp_damage = damage                         # HP ?????
      else
        @mp_damage = damage                         # MP ?????
      end
    else
      if (change_damage? and self.mp > 0)
        @mp_damage = damage                         # MP ?????
      else
        @hp_damage = damage                         # HP ?????
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????(??????)??????
  #     attacker : ???
  #--------------------------------------------------------------------------
  def get_attack_damage(attacker)
    damage = attacker.atk * 4 - self.def * 2        # ????
    if $game_temp.unit_back_attack                  # ????????
      damage += damage * TSRPG::BACK_ATTACK_BONUS / 100
    end
    damage /= 2 if attacker.mp < attacker.atk_mp_cost # MP??????????
    damage = 0 if damage < 0                        # ?????? 0 ?
    damage *= elements_max_rate(attacker.element_set)   # ????
    damage /= 100
    damage = apply_guard(damage)                    # ????
    return damage
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????(??????)??????
  #     user : ??????????????
  #     obj  : ??????????
  #--------------------------------------------------------------------------
  def get_obj_damage(user, obj)
    damage = obj.base_damage                        # ?????????
    if damage > 0                                   # ????????
      damage += user.atk * 4 * obj.atk_f / 100      # ?????: ???
      damage += user.spi * 2 * obj.spi_f / 100      # ?????: ???
      if $game_temp.unit_back_attack                # ????????
        damage += damage * TSRPG::BACK_ATTACK_BONUS / 100
      end
      unless obj.ignore_defense                     # ???????
        damage -= self.def * 2 * obj.atk_f / 100    # ?????: ???
        damage -= self.spi * 1 * obj.spi_f / 100    # ?????: ???
      end
      damage = 0 if damage < 0                      # ?????? 0 ?
    elsif damage < 0                                # ????????
      damage -= user.atk * 4 * obj.atk_f / 100      # ?????: ???
      damage -= user.spi * 2 * obj.spi_f / 100      # ?????: ???
      damage = 0 - damage if zombie?                # ???????????
    end
    damage *= elements_max_rate(obj.element_set)    # ????
    damage /= 100
    damage = apply_guard(damage)                    # ????
    return damage
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #     user  : ???????
  #     skill : ???
  #--------------------------------------------------------------------------
  def skill_effective?(user, skill)
    if skill.for_dead_friend? != dead?
      return false
    end
    if not $game_temp.in_battle and not $game_temp.in_srpg and skill.for_friend?
      return skill_test(user, skill)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #     user : ????????
  #     item : ????
  #    ??????????????????????????
  #update1.011
  #--------------------------------------------------------------------------
  alias tsrpg_game_battler_item_test item_test
  def item_test(user, item)
    return true if $game_temp.in_srpg
    tsrpg_game_battler_item_test(user, item)
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     user : ????????
  #     item : ????
  #update1.011
  #--------------------------------------------------------------------------
  def item_effect(user, item)
    clear_action_results
    unless item_effective?(user, item)
      @skipped = true
      return
    end
    if rand(100) >= calc_hit(user, item)          # ????
      @missed = true
      return
    end
    if rand(100) < calc_eva(user, item)           # ????
      @evaded = true
      return
    end
    hp_recovery = calc_hp_recovery(user, item)    # HP ?????
    mp_recovery = calc_mp_recovery(user, item)    # MP ?????
    make_obj_damage_value(user, item)             # ??????
    if zombie?                                    # ???????????
      hp_recovery = 0 - hp_recovery
      mp_recovery = 0 - mp_recovery
    end
    @hp_damage -= hp_recovery                     # HP ????????
    @mp_damage -= mp_recovery                     # MP ????????
    make_obj_absorb_effect(user, item)            # ??????
    execute_damage(user)                          # ??????
    item_growth_effect(user, item)                # ??????
    if item.physical_attack and @hp_damage == 0   # ??????????
      return                                    
    end
    apply_state_changes(item)                     # ??????
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def set_tile_effect(tile_id)
    @tile_effect = tile_id
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def apply_tile_effect(n, type)
    return n unless $game_temp.in_srpg        # SRPG??????????
    return n if float?                        # ????????
    for pattern in TSRPG::TILE_EFFECT[@tile_effect][1] # ?????????
      effect = TSRPG::TILE_EFFECT_PATTERN[pattern]
      next unless effect[0] == type           # ???????????
      n = (effect[2] ? n * effect[1] / 100 : n + effect[1])
    end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #--------------------------------------------------------------------------
  def slip_damage_effect_tile
    clear_action_results
    return if float?                          # ????????
    for pattern in TSRPG::TILE_EFFECT[@tile_effect][1]
      effect = TSRPG::TILE_EFFECT_PATTERN[pattern]
      if effect[0] == TSRPG::HPR    # HP??(????)
        @hp_damage += effect[2] ? maxhp * effect[1] / 100 : effect[1]
      end
      if effect[0] == TSRPG::MPR    # MP??(????)
        @mp_damage += effect[2] ? maxmp * effect[1] / 100 : effect[1]
      end
    end
    if @hp_damage != 0
      @hp_damage = 0 - @hp_damage
      self.hp = @hp - @hp_damage
    end
    if @mp_damage != 0
      @mp_damage = 0 - @mp_damage
      self.mp = @mp - @mp_damage
    end
  end
end

--------------------------------------Game_BattleAction----------------------------------
#==============================================================================
# ¦ Game_BattleAction
#==============================================================================
class Game_BattleAction
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def obj
    if attack?
      result = @battler           # ?????????????
    elsif skill?
      result = skill              # ???????????
    elsif item?
      result = item               # ?????????????
    elsif guard?
      result = $data_skills[3]    # ????????????
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????
  #update1.007
  #--------------------------------------------------------------------------
  def get_range
    return 1, 0 if obj == nil
    range = obj.atk_range + obj.atk_size      # ??????????
    hole  = obj.atk_hole                      # ?????????
    return range, hole
  end
end


-----------------------------------------Game_Enemy-------------------------------------
#==============================================================================
# ¦ Game_Enemy
#==============================================================================
class Game_Enemy < Game_Battler
  #--------------------------------------------------------------------------
  # ? SRPG???????????????
  #--------------------------------------------------------------------------
  def reset_param_srpg
    recover_all   # ??
    note = $data_enemies[@enemy_id].note
    if note =~ /<autostate=(\d+(?:,\d+)*)>/i   # ?????????
      $1.scan(/\d+/).each { |i|
        state_id = i.to_i
        add_state(state_id) if $data_states[state_id] != nil
      }
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def hit
    return apply_tile_effect(enemy.hit, TSRPG::HIT)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def eva
    return apply_tile_effect(enemy.eva, TSRPG::EVA)
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def cri
    n = enemy.has_critical ? 10 : 0
    return apply_tile_effect(n, TSRPG::CRI)
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.011
  #--------------------------------------------------------------------------
  def element_set
    return enemy.atk_element
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def base_counter_power
    return $data_enemies[@enemy_id].counter_power
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def base_coop_power
    return $data_enemies[@enemy_id].coop_power
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def atk_range
    return $data_enemies[@enemy_id].atk_range
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def atk_range_type
    return $data_enemies[@enemy_id].atk_range_type
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def atk_hole
    return $data_enemies[@enemy_id].atk_hole
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def atk_size
    return $data_enemies[@enemy_id].atk_size
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def atk_size_type
    return $data_enemies[@enemy_id].atk_size_type
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????????
  #--------------------------------------------------------------------------
  def atk_tile
    return $data_enemies[@enemy_id].atk_tile
  end
  #--------------------------------------------------------------------------
  # ? ??????????? ID ???
  #--------------------------------------------------------------------------
  def atk_animation_id
    return $data_enemies[@enemy_id].atk_animation
  end
  #--------------------------------------------------------------------------
  # ? ?????? ???
  #update1.008
  #--------------------------------------------------------------------------
  def action_max
    return $data_enemies[@enemy_id].action_max
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def level
    return ($data_enemies[@enemy_id].note =~ TSRPG::Pattern::LV ? $1.to_i : 0)
  end
end


--------------------------------------------Game_Actor----------------------------
#==============================================================================
# ¦ Game_Actor
#==============================================================================
class Game_Actor < Game_Battler
  #--------------------------------------------------------------------------
  # ? SRPG???????????????
  #--------------------------------------------------------------------------
  def reset_param_srpg
    #recover_all         # ??
    if TSRPG::JOB_AUTO_STATE[@class_id] != nil    # ?????????????
      for state_id in TSRPG::JOB_AUTO_STATE[@class_id]  # ????????????
        add_state(state_id) if $data_states[state_id] != state_id
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  alias tsrpg_game_actor_skills skills
  def skills
    result = tsrpg_game_actor_skills
    for state in states
      for id in state.temp_skill do result.push($data_skills[id]) end
    end
    for item in equips.compact
      for id in item.temp_skill do result.push($data_skills[id]) end
    end
    return result.uniq
  end
  #--------------------------------------------------------------------------
  # ? ?????(???)???
  #--------------------------------------------------------------------------
  def base_agi
    n = actor.parameters[5, @level]
    for item in equips.compact do n += item.agi end
    if TSRPG::JOB_AGI[@class_id] != nil       # ??????????
      n += TSRPG::JOB_AGI[@class_id]
    end
    n -= 1 if over_weight?                    # ??????????1
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def hit
    if two_swords_style
      n1 = weapons[0] == nil ? 95 : weapons[0].hit
      n2 = weapons[1] == nil ? 95 : weapons[1].hit
      n = [n1, n2].min
    else
      n = weapons[0] == nil ? 95 : weapons[0].hit
    end
    n = apply_tile_effect(n, TSRPG::HIT)      # ????????????
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def eva
    n = over_weight? ? 0 : 5                  # ??????????0?
    for item in armors.compact do n += item.eva end
    n = apply_tile_effect(n, TSRPG::EVA)      # ????????????
    return n
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def cri
    n = 4
    n += 4 if actor.critical_bonus
    for weapon in weapons.compact
      n += 4 if weapon.critical_bonus
    end
    n = apply_tile_effect(n, TSRPG::CRI)      # ????????????
    return n
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def base_counter_power
    n = 0
    if TSRPG::JOB_COUNTER_POWER[@class_id] != nil # ??????????
      n += TSRPG::JOB_COUNTER_POWER[@class_id]
    end
    for item in equips.compact do n += item.counter_power end # ????
    return n
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def base_coop_power
    n = 0
    if TSRPG::JOB_COOP_POWER[@class_id] != nil    # ??????????
      n += TSRPG::JOB_COOP_POWER[@class_id]
    end
    for item in equips.compact do n += item.coop_power end    # ????
    return n
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def atk_range
    n = 1
    for weapon in weapons.compact do n = weapon.atk_range end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def atk_range_type
    n = 0
    for weapon in weapons.compact do n = weapon.atk_range_type end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def atk_hole
    n = 0
    for weapon in weapons.compact do n = weapon.atk_hole end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def atk_size
    n = 0
    for weapon in weapons.compact do n = weapon.atk_size end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def atk_size_type
    n = 0
    for weapon in weapons.compact do n = weapon.atk_size_type end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????????
  #--------------------------------------------------------------------------
  def atk_tile
    for item in equips.compact
      return true if item.atk_tile
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ???????MP???
  #--------------------------------------------------------------------------
  def atk_mp_cost
    n = 0
    for item in equips.compact do n += item.atk_mp_cost end
    return n
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def reflect?
    return true if super
    for item in equips.compact
      return true if item.reflect?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????MP???????
  #--------------------------------------------------------------------------
  def change_damage?
    return true if super
    for item in equips.compact
      return true if item.change_damage?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def donevade?
    return true if super
    for item in equips.compact
      return true if item.donevade?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def zombie?
    return true if super
    for item in equips.compact
      return true if item.zombie?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def donback?
    return true if super
    return true if over_weight?     # ??????????????
    for item in equips.compact
      return true if item.donback?
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????? ???
  #update1.008
  #--------------------------------------------------------------------------
  def action_max
    return 1
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def action_exp
    n = (@exp_list[@level+1] - @exp_list[@level]) * TSRPG::ACTION_EXP_RATE / 100
    return [n, 1].max
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #     new_skills : ?????????????
  #--------------------------------------------------------------------------
  def display_level_up(new_skills)
    if $game_temp.in_srpg
      Audio.se_play("Audio/SE/Saint5.ogg", 80, 85)
      Audio.se_play("Audio/SE/Saint6.ogg", 80, 150)
    end
    $game_message.new_page
    text = sprintf(Vocab::LevelUp, @name, Vocab::level, @level)
    $game_message.texts.push(text)
    for skill in new_skills
      text = sprintf(Vocab::ObtainSkill, skill.name)
      $game_message.texts.push(text)
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #     skill : ???
  #--------------------------------------------------------------------------
  def skill_can_use?(skill)
    return false unless super
    # ???????
    element = TSRPG::WEAPON_ELEMENT & skill.element_set
    return false unless element_set & element == element
    # ???????
    for state in states           # ????????????????
      for id in state.temp_skill
        return true if id == skill.id
      end
    end
    for item in equips.compact    # ??????????????
      for id in item.temp_skill
        return true if id == skill.id
      end
    end
    return true if skill.id <= 3  # ??????????????????????
    return skill_learn?(skill)
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     character_name  : ??????????? ?????
  #     character_index : ??????????? ??????
  #     face_name       : ?????????? ?????
  #     face_index      : ?????????? ??????
  #--------------------------------------------------------------------------
  alias tsrpg_game_actor_set_graphic set_graphic
  def set_graphic(character_name, character_index, face_name, face_index)
    tsrpg_game_actor_set_graphic(character_name, character_index, face_name, face_index)
    if $game_temp.in_srpg   # SRPG??????????????
      for event in $game_srpg.alive_actor_list
        if event.unit.id == @actor_id
          event.set_graphic(character_name, character_index)
          event.face_name = face_name
          event.face_index = face_index
          break
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????? (???????)
  #--------------------------------------------------------------------------
  def make_action
    @action.clear
    return unless movable?
    action_list = []
    action = Game_BattleAction.new(self)
    action.set_attack
    action_list.push(action)
    for skill in skills
      #next unless skill_can_use?(skill)
      action = Game_BattleAction.new(self)
      action.set_skill(skill.id)
      action_list.push(action)
    end
    max_value = 0
    @action = action_list[rand(action_list.size)]
  end
end


----------------------------------Game_SrpgEvent---------------------------------
#==============================================================================
# ¦ Game_Character
#==============================================================================
class Game_Character
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_accessor :zoom                     # ?????????
end

#==============================================================================
# ¦ Game_CommonEvent
#==============================================================================
class Game_CommonEvent
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    if self.trigger == 2 and $game_switches[self.switch_id] == true
      @interpreter = ($game_temp.in_srpg ? Game_SrpgInterpreter.new : Game_Interpreter.new) if @interpreter == nil
    else
      @interpreter = nil
    end
  end
end

#==============================================================================
# ¦ Game_SrpgEvent
#==============================================================================
class Game_SrpgEvent < Game_Character
  #--------------------------------------------------------------------------
  # ? ??????????
  #update1.008
  #--------------------------------------------------------------------------
  attr_reader   :trigger                  # ????
  attr_reader   :list                     # ????
  attr_reader   :starting                 # ??????
  attr_reader   :enemy_flag               # ???????
  attr_reader   :boss_flag                # ?????
  attr_reader   :guard_flag               # ??????
  attr_reader   :enemy_id                 # ????(????)?ID
  attr_reader   :away_hp                  # ????HP??
  attr_accessor :face_name                # ????????????
  attr_accessor :face_index               # ?????????????
  attr_accessor :scope_dist               # ????
  attr_accessor :move_target              # ????
  attr_accessor :move_end                 # ???????
  attr_accessor :action_end               # ???????
  attr_accessor :npc                      # NPC???
  attr_accessor :pnpc                     # PNPC???
  attr_accessor :stole                    # ??????
  attr_accessor :action_rest              # ??????
  #--------------------------------------------------------------------------
  # ? ?????????
  #     map_id : ??? ID
  #     event  : ???? (RPG::Event)
  #--------------------------------------------------------------------------
  def initialize(map_id, event)
    super()
    @map_id = map_id
    @event = event
    @id = @event.id
    @erased = false
    @starting = false
    @through = true
    moveto(@event.x, @event.y)            # ???????
    $game_self_switches[[@map_id, @id, "D"]] = false  # ???????D???
    refresh
    @enemy_id   = -1
    @move_end   = false
    @action_end = false
    @boss_flag  = false
    @guard_flag = false
    if @event.name =~ TSRPG::Pattern::ENEMY       # ????
      set_enemy($1.to_i)
    elsif @event.name =~ TSRPG::Pattern::PLAYER   # ????
      set_actor($1.to_i)
    end
    @zoom = $1.to_f if @event.name =~ /<zoom=(\d+\.\d+)>/i  # ??????
    @last_x = x                       # ????x??
    @last_y = y                       # ????y??
    @last_dir = @direction            # ??????
    @move_speed_last = @move_speed    # ???????
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #update1.004
  #update1.008
  #--------------------------------------------------------------------------
  def set_actor(id)
    begin
      if $game_system.srpg_member.size <= id   # ???????????????
        erase
        return
      end
    rescue Exception=>e
      return
    end
    @enemy_flag = false
    @enemy_id = id
    unit.set_tile_effect($game_srpg.tile_effect(@x, @y)) # ????????
    unit.reset_param_srpg  # SRPG?????????????
    @face_name = unit.face_name
    @face_index = unit.face_index
    set_graphic(unit.character_name, unit.character_index)
    @scope_dist = 1024
    @away_hp    = 0
    @boss_flag  = true if @event.name =~ TSRPG::Pattern::BOSS
    @guard_flag = true if @event.name =~ TSRPG::Pattern::GUARD
    @npc  = false
    @pnpc = false
    @stole = true                         # ??????
    @action_rest = unit.action_max        # ??????
    refresh_state                         # ?????????
    $game_srpg.update_alive_unit_count    # ???????????
    if unit.dead?        # ?????????????
      $game_self_switches[[@map_id, @id, "D"]] = true
      refresh
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #update1.008
  #--------------------------------------------------------------------------
  def set_enemy(id)
    @enemy_flag = true
    @enemy_id = id
    @unit = Game_Enemy.new(@id, @enemy_id)
    @unit.set_tile_effect($game_srpg.tile_effect(@x, @y)) # ????????
    @unit.reset_param_srpg  # SRPG?????????????
    @face_name = "Monster"
    @face_index = 0
    note = $data_enemies[@enemy_id].note
    if note =~ TSRPG::Pattern::FACE
      @face_name = $1
      @face_index = $2.to_i
    end
    @scope_dist = note =~ TSRPG::Pattern::SCOPE ? $1.to_i : 1024
    @away_hp    = note =~ TSRPG::Pattern::AWAY ? $1.to_i : 0
    @boss_flag  = true if @event.name =~ TSRPG::Pattern::BOSS
    @guard_flag = true if @event.name =~ TSRPG::Pattern::GUARD
    @npc  = @event.name =~ TSRPG::Pattern::NPC ? true : false
    @pnpc = @event.name =~ TSRPG::Pattern::PNPC ? true : false
    @stole = false                        # ??????
    @action_rest = unit.action_max        # ??????
    refresh_state                         # ?????????
    $game_srpg.update_alive_unit_count    # ???????????
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #update1.004
  #--------------------------------------------------------------------------
  def unit
    if @enemy_flag
      return @unit
    else
      return $game_party.members[$game_system.srpg_member[@enemy_id]]
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #update1.004
  #update1.008
  #--------------------------------------------------------------------------
  def refresh_turn
    set_last_pos              # ?????????????
    if @enemy_flag == $game_srpg.enemy_turn?  # ????????????
      @move_end   = false
      @action_end = false
      @action_rest = unit.action_max
      return
    end
    unit.action.clear
    unless unit.dead?        # ???????????????
      # ????????
      unit.clear_action_results
      unit.slip_damage_effect
      $game_srpg.popup_action_result(self) if unit.hp_damage > 0
      # ????
      unless @enemy_flag
        if unit.auto_hp_recover
          unit.hp += unit.maxhp / 20
          $game_srpg.add_popup(@real_x, @real_y, (unit.maxhp / 20).to_s, Color.new(0, 255, 0), 1)
        end
      end
      
      if unit.regen?
        unit.hp += unit.maxhp / 5
        $game_srpg.add_popup(@real_x, @real_y, (unit.maxhp / 5).to_s, Color.new(0, 255, 0), 1)
      end
      # ?????????
      unit.slip_damage_effect_tile
      if unit.hp_damage != 0 or unit.mp_damage != 0
        $game_srpg.popup_action_result(self)
      end
      damage
      # ?????????
      unit.remove_states_auto
      for state in unit.removed_states
        $game_srpg.add_popup(@real_x, @real_y, state.name, TSRPG::COLOR_REMOVE_STATE, 1)
      end
    end
    refresh_state                     # ???????
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.004
  #--------------------------------------------------------------------------
  def refresh_state
    @through       = true                        # ??????????
    @step_anime    = unit.movable?               # ????????
    @priority_type = unit.float? ? 2 : 1         # ??????????
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????
  #update1.004
  #--------------------------------------------------------------------------
  def opponent?(event)
    result = false
    return false if @id == event.id   # ???????
    if @npc                           # ???NPC???
      result = event.npc ? TSRPG::NPC_BATTLE : true
    elsif event.npc                   # ???NPC???
      result = true
    elsif @pnpc                       # ???PNPC???
      result = event.pnpc ? false : event.enemy_flag
    elsif event.pnpc                  # ???PNPC???
      result = @enemy_flag
    elsif @enemy_flag != event.enemy_flag
      result = true
    end
    result = !result if unit.confusion?  # ??????????
    return result
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def get_distance(event)
    return (@x - event.x).abs + (@y - event.y).abs
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def get_distance_cell(x, y)
    return (@x - x).abs + (@y - y).abs
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #   friend : ?????
  #update1.003
  #--------------------------------------------------------------------------
  def get_near_enemy(friend = false)
    # ?????????????????
    list = []
    for event in $game_srpg.unit_list
      next if opponent?(event) == friend
      next if event.unit.dead?
      d = ((unit.confusion? or unit.berserker?) ? 1024 : @scope_dist)
      next if get_distance(event) > d   # ?????
      list.push(event)
    end
    # ????HP??????????
    unless list.empty?
      list.sort! do |a, b|
        a.unit.hp <=> b.unit.hp
      end
    end
    return list
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #update1.009
  #update1.010
  #--------------------------------------------------------------------------
  def turn_cell(x, y)
    return if pos?(x, y)                  # ?????????
    sx = @x - x
    sy = @y - y
    if sx.abs >= sy.abs                   # ??????????
      sx > 0 ? turn_left : turn_right
    else                                  # ??????????
      sy > 0 ? turn_up : turn_down
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #update1.004
  #--------------------------------------------------------------------------
  def turn_enemy
    d = 9999
    for event in $game_srpg.alive_unit_list
      next unless opponent?(event)
      d2 = (@x - event.x).abs + (@y - event.y).abs
      d, target = d2, event if d > d2
    end
    turn_cell(target.x, target.y) if d < 15
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????????????
  #    ???$game_temp.unit_back_attack?????
  #update1.004
  #update1.009
  #--------------------------------------------------------------------------
  def back_attack?(event)
    if event.id == @id
      $game_temp.unit_back_attack = false # ?????????????
    else
      if unit.action.skill? or unit.action.item?
        if unit.action.obj.not_back_attack? or  # ???????????
           unit.action.obj.for_friend?          # ???????????
          $game_temp.unit_back_attack = false   # ???????
          return
        end
      end
      d = @direction                # ???????????
      turn_cell(event.x, event.y)   # ???????
      $game_temp.unit_back_attack = @direction == event.direction
      @direction = d                # ???????
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def set_last_pos
    @last_x = @x
    @last_y = @y
    @last_dir = @direction
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #--------------------------------------------------------------------------
  def can_move_cancel?
    return false if @enemy_flag
    return false if @action_end
    return false if $game_srpg.alive_unit_xy(@last_x, @last_y) != nil
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.004
  #--------------------------------------------------------------------------
  def undo_move
    @x = @last_x
    @y = @last_y
    @direction = @last_dir
    @real_x = @x << 8
    @real_y = @y << 8
    @move_end = false
    $scene.focus_event(self)    # ????????????
    unit.set_tile_effect($game_srpg.tile_effect(@x, @y)) # ???????
  end
  #--------------------------------------------------------------------------
  # ? ????
  #update1.004
  #--------------------------------------------------------------------------
  def reset
    $game_self_switches[[@map_id, @id, "D"]] = false
    refresh
    set_graphic(unit.character_name, unit.character_index) unless @enemy_flag
    @through    = true    # ??????????
    @step_anime = true    # ?????????
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #update1.004
  #--------------------------------------------------------------------------
  def damage(attacker = nil)
    if unit.dead?
      Audio.se_play("Audio/SE/Collapse2.ogg", 80, 150)
      $game_self_switches[[@map_id, @id, "D"]] = true
      refresh
      $scene.talk(self) unless $game_srpg.interpreter.running? # ???????
      # ????????????????????????????
      if attacker != nil
        if @enemy_flag and not attacker.enemy_flag
          $scene.add_exp($data_enemies[@enemy_id].exp)
          drop_item([unit.drop_item1, unit.drop_item2])
          $scene.add_gold(unit.gold)
        end
      end
      $game_srpg.update_alive_unit_count    # ???????????
      $scene.check_rule   # ????
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def drop_item(drop_items)
    result = false
    for di in drop_items
      next if di.kind == 0
      next if rand(di.denominator) != 0
      if di.kind == 1
        $scene.add_item($data_items[di.item_id])
        result = true
      elsif di.kind == 2
        if $include_tiex
          $scene.add_item(WeaponEx.new(di.weapon_id))
        else
          $scene.add_item($data_weapons[di.weapon_id])
        end
        result = true
      elsif di.kind == 3
        if $include_tiex
          $scene.add_item(ArmorEx.new(di.armor_id))
        else
          $scene.add_item($data_armors[di.armor_id])
        end
        result = true
      end
    end
    return result
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????????????????????
  #--------------------------------------------------------------------------
  def in_scope?
    obj = $scene.event.unit.action.obj
    if obj == nil or obj.is_a?(Game_Battler)  # ????
      return (!unit.dead?)                   # ?????????????
    else                                      # ???? or ???
      return false if obj.for_dead_friend? ^ unit.dead?  # ??????
      return false if obj.noself? and @id == $scene.event.id  # ???????
      return true if obj.noscope?             # ??????????
      return (obj.for_friend? ^ $scene.event.opponent?(self))
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #     x : X ??
  #     y : Y ??
  #--------------------------------------------------------------------------
  def passable?(x, y)
    x = $game_srpg.round_x(x)                       # ????????
    y = $game_srpg.round_y(y)                       # ????????
    return false unless $game_srpg.valid?(x, y)     # ?????
    return true if @through or debug_through?       # ???? ON?
    return false unless map_passable?(x, y)         # ?????????
    return false if collide_with_characters?(x, y)  # ??????????
    return true                                     # ???
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x : X ??
  #     y : Y ??
  #    ???????????????????????
  #--------------------------------------------------------------------------
  def map_passable?(x, y)
    return $game_srpg.passable?(x, y)
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #     x : X ??
  #     y : Y ??
  #    ???????????????????????????
  #--------------------------------------------------------------------------
  def collide_with_characters?(x, y)
    for event in $game_srpg.events_xy(x, y)         # ??????????
      unless event.through                          # ???? OFF?
        return true if self.is_a?(Game_Event)       # ???????
        return true if event.priority_type == 1     # ????????
      end
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ??? (????????????????)
  #update1.008
  #--------------------------------------------------------------------------
  def lock
    unless @locked
      @prelock_direction = @direction
      if $game_srpg.talker_pos != nil
        turn_cell($game_srpg.talker_pos[0], $game_srpg.talker_pos[1])
      else
        turn_toward_player
      end
      @locked = true
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #     x : X ??
  #     y : Y ??
  #--------------------------------------------------------------------------
  def moveto(x, y)
    @x = x % $game_srpg.width
    @y = y % $game_srpg.height
    @real_x = @x * 256
    @real_y = @y * 256
    @prelock_direction = 0
    straighten
    update_bush_depth
  end
  #--------------------------------------------------------------------------
  # ? ?? X ?????
  #--------------------------------------------------------------------------
  def screen_x
    return ($game_srpg.adjust_x(@real_x) + 8007) / 8 - 1000 + 16
  end
  #--------------------------------------------------------------------------
  # ? ?? Y ?????
  #--------------------------------------------------------------------------
  def screen_y
    y = ($game_srpg.adjust_y(@real_y) + 8007) / 8 - 1000 + 32
    y -= 4 unless object?
    if @jump_count >= @jump_peak
      n = @jump_count - @jump_peak
    else
      n = @jump_peak - @jump_count
    end
    return y - (@jump_peak * @jump_peak - n * n) / 2
  end
  #--------------------------------------------------------------------------
  # ? ?? Z ?????
  #--------------------------------------------------------------------------
  def screen_z
    if @priority_type == 2
      return 200
    elsif @priority_type == 0
      return 60
    elsif @tile_id > 0
      pass = $game_srpg.passages[@tile_id]
      if pass & 0x10 == 0x10    # [?]
        return 160
      else
        return 40
      end
    else
      return 100
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def update_bush_depth
    if object? or @priority_type != 1 or @jump_count > 0
      @bush_depth = 0
    else
      bush = $game_srpg.bush?(@x, @y)
      if bush and not moving?
        @bush_depth = 8
      elsif not bush
        @bush_depth = 0
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ????? : ????
  #--------------------------------------------------------------------------
  def move_type_custom
    if stopping?
      command = @move_route.list[@move_route_index]   # ?????????
      @move_failed = false
      if command.code == 0                            # ??????
        if @move_route.repeat                         # [???????]
          @move_route_index = 0
        elsif @move_route_forcing                     # ????????
          @move_route_forcing = false                 # ?????
          @move_route = @original_move_route          # ????????
          @move_route_index = @original_move_route_index
          @original_move_route = nil
        end
      else
        case command.code
        when 1    # ????
          move_down
        when 2    # ????
          move_left
        when 3    # ????
          move_right
        when 4    # ????
          move_up
        when 5    # ?????
          move_lower_left
        when 6    # ?????
          move_lower_right
        when 7    # ?????
          move_upper_left
        when 8    # ?????
          move_upper_right
        when 9    # ???????
          move_random
        when 10   # ?????????
          move_toward_player
        when 11   # ???????????
          move_away_from_player
        when 12   # ????
          move_forward
        when 13   # ????
          move_backward
        when 14   # ????
          jump(command.parameters[0], command.parameters[1])
        when 15   # ????
          @wait_count = command.parameters[0] - 1
        when 16   # ????
          turn_down
        when 17   # ????
          turn_left
        when 18   # ????
          turn_right
        when 19   # ????
          turn_up
        when 20   # ?? 90 ???
          turn_right_90
        when 21   # ?? 90 ???
          turn_left_90
        when 22   # 180 ???
          turn_180
        when 23   # ???? 90 ???
          turn_right_or_left_90
        when 24   # ?????????
          turn_random
        when 25   # ??????????
          turn_toward_player
        when 26   # ??????????
          turn_away_from_player
        when 27   # ???? ON
          $game_switches[command.parameters[0]] = true
          $game_srpg.need_refresh = true
        when 28   # ???? OFF
          $game_switches[command.parameters[0]] = false
          $game_srpg.need_refresh = true
        when 29   # ???????
          @move_speed = command.parameters[0]
        when 30   # ???????
          @move_frequency = command.parameters[0]
        when 31   # ????? ON
          @walk_anime = true
        when 32   # ????? OFF
          @walk_anime = false
        when 33   # ?????? ON
          @step_anime = true
        when 34   # ?????? OFF
          @step_anime = false
        when 35   # ???? ON
          @direction_fix = true
        when 36   # ???? OFF
          @direction_fix = false
        when 37   # ???? ON
          @through = true
        when 38   # ???? OFF
          @through = false
        when 39   # ??? ON
          @transparent = true
        when 40   # ??? OFF
          @transparent = false
        when 41   # ????????
          set_graphic(command.parameters[0], command.parameters[1])
        when 42   # ???????
          @opacity = command.parameters[0]
        when 43   # ???????
          @blend_type = command.parameters[0]
        when 44   # SE ???
          command.parameters[0].play
        when 45   # ?????
          eval(command.parameters[0])
        end
        if not @move_route.skippable and @move_failed
          return  # [???????????] OFF & ????
        end
        @move_route_index += 1
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ????
  #     turn_ok : ????????????
  #--------------------------------------------------------------------------
  def move_down(turn_ok = true)
    if passable?(@x, @y+1)                  # ????
      turn_down
      @y = $game_srpg.round_y(@y+1)
      @real_y = (@y-1)*256
      increase_steps
      @move_failed = false
    else                                    # ?????
      turn_down if turn_ok
      check_event_trigger_touch(@x, @y+1)   # ???????????
      @move_failed = true
    end
  end
  #--------------------------------------------------------------------------
  # ? ????
  #     turn_ok : ????????????
  #--------------------------------------------------------------------------
  def move_left(turn_ok = true)
    if passable?(@x-1, @y)                  # ????
      turn_left
      @x = $game_srpg.round_x(@x-1)
      @real_x = (@x+1)*256
      increase_steps
      @move_failed = false
    else                                    # ?????
      turn_left if turn_ok
      check_event_trigger_touch(@x-1, @y)   # ???????????
      @move_failed = true
    end
  end
  #--------------------------------------------------------------------------
  # ? ????
  #     turn_ok : ????????????
  #--------------------------------------------------------------------------
  def move_right(turn_ok = true)
    if passable?(@x+1, @y)                  # ????
      turn_right
      @x = $game_srpg.round_x(@x+1)
      @real_x = (@x-1)*256
      increase_steps
      @move_failed = false
    else                                    # ?????
      turn_right if turn_ok
      check_event_trigger_touch(@x+1, @y)   # ???????????
      @move_failed = true
    end
  end
  #--------------------------------------------------------------------------
  # ? ????
  #     turn_ok : ????????????
  #--------------------------------------------------------------------------
  def move_up(turn_ok = true)
    if passable?(@x, @y-1)                  # ????
      turn_up
      @y = $game_srpg.round_y(@y-1)
      @real_y = (@y+1)*256
      increase_steps
      @move_failed = false
    else                                    # ?????
      turn_up if turn_ok
      check_event_trigger_touch(@x, @y-1)   # ???????????
      @move_failed = true
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     character_name  : ??????????? ?????
  #     character_index : ??????????? ??????
  #--------------------------------------------------------------------------
  def set_graphic(character_name, character_index)
    @tile_id = 0
    @character_name = character_name
    @character_index = character_index
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def clear_starting
    @starting = false
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def start
    return if @list.size <= 1                   # ???????
    @starting = true
    lock if @trigger < 3
    unless $game_srpg.interpreter.running?
      $game_srpg.interpreter.setup_starting_event
    end
  end
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def erase
    @erased = true
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def conditions_met?(page)
    c = page.condition
    if c.switch1_valid      # ???? 1
      return false if $game_switches[c.switch1_id] == false
    end
    if c.switch2_valid      # ???? 2
      return false if $game_switches[c.switch2_id] == false
    end
    if c.variable_valid     # ??
      return false if $game_variables[c.variable_id] < c.variable_value
    end
    if c.self_switch_valid  # ???????
      key = [@map_id, @event.id, c.self_switch_ch]
      return false if $game_self_switches[key] != true
    end
    if c.item_valid         # ????
      item = $data_items[c.item_id]
      return false if $game_party.item_number(item) == 0
    end
    if c.actor_valid        # ????
      actor = $game_actors[c.actor_id]
      return false unless $game_party.members.include?(actor)
    end
    return true   # ????
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def setup(new_page)
    @page = new_page
    if @page == nil
      @tile_id = 0
      @character_name = ""
      @character_index = 0
      @move_type = 0
      @through = true
      @trigger = nil
      @list = nil
      @interpreter = nil
    else
      @tile_id = @page.graphic.tile_id
      @character_name = @page.graphic.character_name
      @character_index = @page.graphic.character_index
      if @original_direction != @page.graphic.direction
        @direction = @page.graphic.direction
        @original_direction = @direction
        @prelock_direction = 0
      end
      if @original_pattern != @page.graphic.pattern
        @pattern = @page.graphic.pattern
        @original_pattern = @pattern
      end
      @move_type = @page.move_type
      @move_speed = @page.move_speed
      @move_frequency = @page.move_frequency
      @move_route = @page.move_route
      @move_route_index = 0
      @move_route_forcing = false
      @walk_anime = @page.walk_anime
      @step_anime = @page.step_anime
      @direction_fix = @page.direction_fix
      @through = @page.through
      @priority_type = @page.priority_type
      @trigger = @page.trigger
      @list = @page.list
      @interpreter = nil
      if @trigger == 4                       # ????? [????] ???
        @interpreter = Game_Interpreter.new  # ??????????????
      end
    end
    update_bush_depth
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    new_page = nil
    unless @erased                          # ????????????
      for page in @event.pages.reverse      # ?????????????
        next unless conditions_met?(page)   # ??????
        new_page = page
        break
      end
    end
    if new_page != @page            # ?????????????
      clear_starting                # ??????????
      setup(new_page)               # ??????????????
      check_event_trigger_auto      # ???????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def check_event_trigger_auto
    start if @trigger == 3
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    last_moving = moving?
    super
    check_event_trigger_auto                    # ???????????
    if @interpreter != nil                      # ???????
      unless @interpreter.running?              # ????????
        @interpreter.setup(@list, @event.id)    # ??????
      end
      @interpreter.update                       # ?????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update_move
    distance = 2 ** @move_speed   # ?????????????
    distance *= 2 if dash?        # ????????????
    @real_x = [@real_x - distance, @x * 256].max if @x * 256 < @real_x
    @real_x = [@real_x + distance, @x * 256].min if @x * 256 > @real_x
    @real_y = [@real_y - distance, @y * 256].max if @y * 256 < @real_y
    @real_y = [@real_y + distance, @y * 256].min if @y * 256 > @real_y
    unless moving?
      update_bush_depth
      Sound.play_step   # ??????
    end
    if @walk_anime
      @anime_count += 1.5
    elsif @step_anime
      @anime_count += 1
    end
  end
end

------------------------------------Game_Cursor/Popup-------------------------------

#==============================================================================
# ¦ Game_Cursor
#==============================================================================
class Game_Cursor
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  CENTER_X = (544 / 2 - 16) * 8     # ????? X ?? * 8
  CENTER_Y = (416 / 2 - 16) * 8     # ????? Y ?? * 8
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_reader   :x                        # ??? X ?? (????)
  attr_reader   :y                        # ??? Y ?? (????)
  attr_reader   :real_x                   # ??? X ?? (??? * 256)
  attr_reader   :real_y                   # ??? Y ?? (??? * 256)
  attr_reader   :pattern                  # ????
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def initialize
    event = $game_srpg.unit_list[0]
    @x, @y = event.x, @y = event.y
    @real_x = (@x << 8) + (16 << 3)
    @real_y = (@y << 8) + (16 << 3)
    @vx, @vy = 0, 0
    @auto_move_count = 0
    @anime_count = 0
    @pattern = 1
    center(@x, @y)
  end
  #--------------------------------------------------------------------------
  # ? ?? X ?????
  #--------------------------------------------------------------------------
  def screen_x
    return ($game_srpg.adjust_x(@real_x) + 8007) / 8 - 1000 + 16
  end
  #--------------------------------------------------------------------------
  # ? ?? Y ?????
  #--------------------------------------------------------------------------
  def screen_y
    return ($game_srpg.adjust_y(@real_y) + 8007) / 8 - 1000 + 32
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def set_auto_move(x, y)
    @x, @y = x, y
    @auto_move_count = 8
    @vx = ((@x << 8) + (16 << 3) - @real_x) / 8
    @vy = ((@y << 8) + (16 << 3) - @real_y) / 8
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def update_animation
    if @anime_count > 12
      @pattern = (@pattern + 1) % 4
      @anime_count = 0
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????????
  #     x : X ??
  #     y : Y ??
  #--------------------------------------------------------------------------
  def center(x, y)
    display_x = x * 256 - CENTER_X                    # ?????
    max_x = ($game_srpg.width - 17) * 256             # ??????
    display_x = [0, [display_x, max_x].min].max       # ?????
    display_y = y * 256 - CENTER_Y                    # ?????
    max_y = ($game_srpg.height - 13) * 256            # ??????
    display_y = [0, [display_y, max_y].min].max       # ?????
    $game_srpg.set_display_pos(display_x, display_y)  # ??????
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def update_scroll(last_real_x, last_real_y)
    ax1 = $game_srpg.adjust_x(last_real_x)
    ay1 = $game_srpg.adjust_y(last_real_y)
    ax2 = $game_srpg.adjust_x(@real_x)
    ay2 = $game_srpg.adjust_y(@real_y)
    $game_srpg.scroll_down(ay2 - ay1)  if ay2 > ay1 and ay2 > CENTER_Y
    $game_srpg.scroll_left(ax1 - ax2)  if ax2 < ax1 and ax2 < CENTER_X
    $game_srpg.scroll_right(ax2 - ax1) if ax2 > ax1 and ax2 > CENTER_X
    $game_srpg.scroll_up(ay1 - ay2)    if ay2 < ay1 and ay2 < CENTER_Y
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    if @auto_move_count > 0   # ?????????
      last_real_x, last_real_y = @real_x, @real_y
      @real_x += @vx
      @real_y += @vy
      @auto_move_count -= 1
      if @auto_move_count == 0
        @real_x = (@x << 8) + (16 << 3)
        @real_y = (@y << 8) + (16 << 3)
      end
      update_scroll(last_real_x, last_real_y)
    elsif $game_srpg.scene_state < 50 and not $game_message.visible
      return if $game_srpg.interpreter.running? # ??????????????
      last_real_x, last_real_y = @real_x, @real_y
      speed = Input.press?(Input::A) ? 96 : 32
      @real_y -= speed if Input.press?(Input::UP)
      @real_y += speed if Input.press?(Input::DOWN)
      @real_x -= speed if Input.press?(Input::LEFT)
      @real_x += speed if Input.press?(Input::RIGHT)
      unless $game_srpg.valid?(@real_x >> 8, @real_y >> 8) # ???????
        @real_x, @real_y = last_real_x, last_real_y
      end
      @x, @y = @real_x >> 8, @real_y >> 8
      @anime_count += 1
      update_animation
      update_scroll(last_real_x, last_real_y)
    end
  end
end

#==============================================================================
# ¦ Game_Popup
#==============================================================================
class Game_Popup
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_reader   :x                        # ??x
  attr_reader   :y                        # ??y
  attr_reader   :text                     # ?????????
  attr_reader   :color                    # ???
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def initialize
    @count = 0    # ????
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def setup(x, y, text, color, type = 0)
    @x, @y = x + 128, y
    @text = text
    @color = color
    @bottom = @y
    @count = 90 # ????
    case type
    when 0      # ??????(????)
      @vy       = -64
      @gravity  = 4
    when 1      # ???????(????)
      @vy       = -4
      @gravity  = 0
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #--------------------------------------------------------------------------
  def erased?
    return (@count <= 0)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    return if erased?
    @vy += @gravity
    @y += @vy
    if @y > @bottom
      @vy = 0 - @vy / 2
      @y = @bottom
    end
    @count -= 1
  end
end


---------------------------------Game_SrpgInterpreter----------------------------
#==============================================================================
# ¦ Game_SrpgInterpreter
#==============================================================================
class Game_SrpgInterpreter < Game_Interpreter
  #--------------------------------------------------------------------------
  # ? ???????????
  #     list     : ????
  #     event_id : ???? ID
  #--------------------------------------------------------------------------
  def setup(list, event_id = 0)
    clear                             # ???????????????
    @map_id = $game_srpg.map_id       # ??? ID ???
    @original_event_id = event_id     # ???? ID ???
    @event_id = event_id              # ???? ID ???
    @list = list                      # ???????
    @index = 0                        # ??????????
    cancel_menu_call                  # ?????????????
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def setup_starting_event
    if $game_srpg.need_refresh            # ??????????????
      $game_srpg.refresh
    end
    if $game_temp.common_event_id > 0     # ???????????????
      setup($data_common_events[$game_temp.common_event_id].list,
        $game_temp.common_event_user)
      $game_temp.common_event_id = 0
      $game_temp.common_event_user = nil
      return
    end
    for event in $game_srpg.events.values # ???????
      if event.starting                   # ????????????????
        event.clear_starting              # ??????????
        setup(event.list, event.id)       # ???????????
        return
      end
    end
    for event in $data_common_events.compact      # ???????
      if event.trigger == 1 and           # ???????????
         $game_switches[event.switch_id] == true  # ??????? ON ???
        setup(event.list)                 # ???????????
        return
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    loop do
      if $game_srpg.map_id != @map_id       # ???????????????
        @event_id = 0                       # ???? ID ? 0 ???
      end
      if @child_interpreter != nil          # ??????????????
        @child_interpreter.update           # ??????????
        if @child_interpreter.running?      # ??????
          return                            # ??
        else                                # ?????????
          @child_interpreter = nil          # ??????????
        end
      end
      if @message_waiting                   # ??????????
        return
      end
      if @moving_character != nil           # ???????
        if @moving_character.move_route_forcing
          return
        end
        @moving_character = nil
      end
      if @wait_count > 0                    # ?????
        @wait_count -= 1
        return
      end
      if $game_troop.forcing_battler != nil # ????????
        return
      end
      if $game_temp.next_scene != nil       # ?????????
        return
      end
      if @list == nil                       # ????????????
        setup_starting_event if @main       # ???????????????
        return if @list == nil              # ??????????????
      end
      return if execute_command == false    # ???????????
      @index += 1                           # ??????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def screen
    return $game_srpg.screen
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def command_end
    #added exception trapping for calling common events
    begin
      @list = nil                             # ???????????
      if @main and @event_id > 0              # ??????????????
        $game_srpg.events[@event_id].unlock   # ???????????
      end
    rescue Exception=>e
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     param : -1 ????????0 ?????????????????? ID
  #--------------------------------------------------------------------------
  def get_character(param)
    case param
    when -1   # ?????
      return $game_player
    when 0    # ??????
      events = $game_srpg.events
      return events == nil ? nil : events[@event_id]
    else      # ???????
      events = $game_srpg.events
      return events == nil ? nil : events[param]
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def command_117
    common_event = $data_common_events[@params[0]]
    if common_event != nil
      @child_interpreter = Game_SrpgInterpreter.new(@depth + 1)
      @child_interpreter.setup(common_event.list, @event_id)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def command_121
    for i in @params[0] .. @params[1]   # ???????
      $game_switches[i] = (@params[2] == 0)
    end
    $game_srpg.need_refresh = true
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def command_122
    value = 0
    case @params[3]  # ?????
    when 0  # ??
      value = @params[4]
    when 1  # ??
      value = $game_variables[@params[4]]
    when 2  # ??
      value = @params[4] + rand(@params[5] - @params[4] + 1)
    when 3  # ????
      value = $game_party.item_number($data_items[@params[4]])
    when 4  # ????
      actor = $game_actors[@params[4]]
      if actor != nil
        case @params[5]
        when 0  # ???
          value = actor.level
        when 1  # ???
          value = actor.exp
        when 2  # HP
          value = actor.hp
        when 3  # MP
          value = actor.mp
        when 4  # MaxHP
          value = actor.maxhp
        when 5  # MaxMP
          value = actor.maxmp
        when 6  # ???
          value = actor.atk
        when 7  # ???
          value = actor.def
        when 8  # ???
          value = actor.spi
        when 9  # ???
          value = actor.agi
        end
      end
    when 5  # ????
      enemy = $game_troop.members[@params[4]]
      if enemy != nil
        case @params[5]
        when 0  # HP
          value = enemy.hp
        when 1  # MP
          value = enemy.mp
        when 2  # MaxHP
          value = enemy.maxhp
        when 3  # MaxMP
          value = enemy.maxmp
        when 4  # ???
          value = enemy.atk
        when 5  # ???
          value = enemy.def
        when 6  # ???
          value = enemy.spi
        when 7  # ???
          value = enemy.agi
        end
      end
    when 6  # ??????
      character = get_character(@params[4])
      if character != nil
        case @params[5]
        when 0  # X ??
          value = character.x
        when 1  # Y ??
          value = character.y
        when 2  # ??
          value = character.direction
        when 3  # ?? X ??
          value = character.screen_x
        when 4  # ?? Y ??
          value = character.screen_y
        end
      end
    when 7  # ???
      case @params[4]
      when 0  # ??? ID
        value = $game_srpg.map_id
      when 1  # ??????
        value = $game_party.members.size
      when 2  # ????
        value = $game_party.gold
      when 3  # ??
        value = $game_party.steps
      when 4  # ?????
        value = Graphics.frame_count / Graphics.frame_rate
      when 5  # ????
        value = $game_system.timer / Graphics.frame_rate
      when 6  # ?????
        value = $game_system.save_count
      end
    end
    for i in @params[0] .. @params[1]   # ???????
      case @params[2]  # ??
      when 0  # ??
        $game_variables[i] = value
      when 1  # ??
        $game_variables[i] += value
      when 2  # ??
        $game_variables[i] -= value
      when 3  # ??
        $game_variables[i] *= value
      when 4  # ??
        $game_variables[i] /= value if value != 0
      when 5  # ??
        $game_variables[i] %= value if value != 0
      end
      if $game_variables[i] > 99999999    # ??????
        $game_variables[i] = 99999999
      end
      if $game_variables[i] < -99999999   # ??????
        $game_variables[i] = -99999999
      end
    end
    $game_srpg.need_refresh = true
    return true
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def command_123
    if @original_event_id > 0
      key = [@map_id, @original_event_id, @params[0]]
      $game_self_switches[key] = (@params[1] == 0)
    end
    $game_srpg.need_refresh = true
    return true
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def command_126
    value = operate_value(@params[1], @params[2], @params[3])
    $game_party.gain_item($data_items[@params[0]], value)
    $game_srpg.need_refresh = true
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def command_129
    actor = $game_actors[@params[0]]
    if actor != nil
      if @params[1] == 0    # ???
        if @params[2] == 1  # ???
          $game_actors[@params[0]].setup(@params[0])
        end
        $game_party.add_actor(@params[0])
      else                  # ??
        $game_party.remove_actor(@params[0])
      end
      $game_srpg.need_refresh = true
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def command_204
    return true if $game_temp.in_battle
    return false if $game_srpg.scrolling?
    $game_srpg.start_scroll(@params[0], @params[1], @params[2])
    return true
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def command_205
    if $game_srpg.need_refresh
      $game_srpg.refresh
    end
    character = get_character(@params[0])
    if character != nil
      character.force_move_route(@params[1])
      @moving_character = character if @params[1].wait
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def command_214
    if @event_id > 0
      $game_srpg.events[@event_id].erase
    end
    @index += 1
    return false
  end
end


-------------------------------Sprite_Character---------------------------------
#==============================================================================
# ¦ Sprite_Character
#==============================================================================
class Sprite_Character < Sprite_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     viewport  : ??????
  #     character : ?????? (Game_Character)
  #--------------------------------------------------------------------------
  alias tsrpg_sprite_character_initialize initialize
  def initialize(viewport, character = nil)
    tsrpg_sprite_character_initialize(viewport, character)
    if character.zoom != nil
      self.zoom_x = character.zoom
      self.zoom_y = character.zoom
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  alias tsrpg_sprite_character_update update
  def update
    tsrpg_sprite_character_update
    if $game_temp.in_srpg and @character.is_a?(Game_SrpgEvent)
      if @character.move_end and @character.action_end and    # ?????
         $game_srpg.enemy_turn? == @character.enemy_flag
        self.tone.set(0, 0, 0, 255)
      else
        self.tone.set(0, 0, 0)
      end
      if @character.enemy_id >= 0 and @character.unit.float?  # ????
        @float_count = 0 if @float_count == nil or @float_count == 60
        @float_count += 1
        n = (Math.cos(@float_count * Math::PI / 30) * 6).to_i - 12
        self.y += n
      end
    end
  end
end


------------------------------------Sprite_Cursor / Popup---------------------------
#==============================================================================
# ¦ Sprite_Cursor
#==============================================================================
class Sprite_Cursor < Sprite
  #--------------------------------------------------------------------------
  # ? ?????????
  #     viewport  : ??????
  #--------------------------------------------------------------------------
  def initialize(viewport)
    super(viewport)
    self.z = 200
    self.ox = 16
    self.oy = 32
    self.bitmap = Cache.character("!$cursor")
    @cursor = $game_cursor
    @cell_sprite = Sprite.new(viewport)
    @cell_sprite.bitmap = Cache.system("cursor")
    @cell_sprite.z = 55
    update
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def dispose
    self.bitmap.dispose if self.bitmap != nil
    @cell_sprite.bitmap.dispose
    @cell_sprite.dispose
    super
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def update_src_rect
    pattern = @cursor.pattern < 3 ? @cursor.pattern : 1
    self.src_rect.set(pattern * 32, 0, 32, 32)
  end
  #--------------------------------------------------------------------------
  # ? ???????x?????
  #--------------------------------------------------------------------------
  def cell_x
    return @cell_sprite.x
  end
  #--------------------------------------------------------------------------
  # ? ???????y?????
  #--------------------------------------------------------------------------
  def cell_y
    return @cell_sprite.y
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    update_src_rect
    self.x = @cursor.screen_x
    self.y = @cursor.screen_y
    @cell_sprite.x = ($game_srpg.adjust_x(@cursor.real_x >> 8 << 8) + 8007) / 8 - 1000
    @cell_sprite.y = ($game_srpg.adjust_y(@cursor.real_y >> 8 << 8) + 8007) / 8 - 1000
  end
end

#==============================================================================
# ¦ Sprite_Popup
#==============================================================================
class Sprite_Popup < Sprite
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_accessor :popup
  #--------------------------------------------------------------------------
  # ? ?????????
  #     viewport  : ??????
  #     popup     : ?????? (Game_Popup)
  #--------------------------------------------------------------------------
  def initialize(viewport, popup = nil)
    super(viewport)
    self.z = 150
    @popup = popup
    update
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def dispose
    self.bitmap.dispose if self.bitmap != nil
    super
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    if self.visible == @popup.erased?
      self.bitmap.dispose if self.bitmap != nil
      unless @popup.erased?
        w = @popup.text.length * 12 + 8
        bitmap = Bitmap.new(w, 26)
        bitmap.font.color = @popup.color
        bitmap.font.bold = true
        bitmap.draw_text(0, 0, w, 24, @popup.text, 1)
        self.bitmap = bitmap
        self.ox = w / 2
      end
      self.visible = !@popup.erased?
    end
    if self.visible
      self.x = ($game_srpg.adjust_x(@popup.x) + 8007) / 8 - 1000
      self.y = ($game_srpg.adjust_y(@popup.y) + 8007) / 8 - 1000
    end
  end
end


----------------------------------Spriteset_Srpg-----------------------------------
#==============================================================================
# ¦ Spriteset_Srpg
#==============================================================================
class Spriteset_Srpg < Spriteset_Map
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def initialize
    create_viewports
    create_tilemap
    create_parallax
    create_characters
    create_weather
    create_pictures
    create_timer
    create_effect_area
    create_cursor
    create_popups
    update
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def create_tilemap
    @tilemap = Tilemap.new(@viewport1)
    @tilemap.bitmaps[0] = Cache.system("TileA1")
    @tilemap.bitmaps[1] = Cache.system("TileA2")
    @tilemap.bitmaps[2] = Cache.system("TileA3")
    @tilemap.bitmaps[3] = Cache.system("TileA4")
    @tilemap.bitmaps[4] = Cache.system("TileA5")
    @tilemap.bitmaps[5] = Cache.system("TileB")
    @tilemap.bitmaps[6] = Cache.system("TileC")
    @tilemap.bitmaps[7] = Cache.system("TileD")
    @tilemap.bitmaps[8] = Cache.system("TileE")
    @tilemap.map_data = $game_srpg.data
    @tilemap.passages = $game_srpg.passages
    @tilemap.flash_data = Table.new($game_srpg.width, $game_srpg.height)
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def create_characters
    @character_sprites = []
    for i in $game_srpg.events.keys.sort
      sprite = Sprite_Character.new(@viewport1, $game_srpg.events[i])
      @character_sprites.push(sprite)
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def create_pictures
    @picture_sprites = []
    for i in 1..20
      @picture_sprites.push(Sprite_Picture.new(@viewport2,
        $game_srpg.screen.pictures[i]))
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def create_effect_area
    @effect_area_sprite = Sprite.new(@viewport1)
    @effect_area_sprite.bitmap = Bitmap.new(544, 416)
    @effect_area_sprite.z = 54
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def create_cursor
    @cursor_sprite = Sprite_Cursor.new(@viewport1)
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def create_popups
    @popup_sprites = []
    for i in 0...16
      @popup_sprites.push(Sprite_Popup.new(@viewport2, $game_srpg.popups[i]))
    end
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def dispose
    dispose_tilemap
    dispose_parallax
    dispose_characters
    dispose_weather
    dispose_pictures
    dispose_timer
    @effect_area_sprite.dispose
    @cursor_sprite.dispose
    # ?????????????
    for i in 0...@popup_sprites.size
      @popup_sprites[i].dispose if @popup_sprites[i] != nil
    end
    dispose_viewports
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    update_tilemap
    update_parallax
    update_characters
    update_weather
    update_pictures
    update_timer
    update_cursor
    update_effect_area
    # ?????????
    for i in 0...@popup_sprites.size
      if @popup_sprites[i] != nil
        @popup_sprites[i].update
        @popup_sprites[i] = nil if @popup_sprites[i].disposed?
      end
    end
    update_viewports
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def update_tilemap
    @tilemap.ox = $game_srpg.display_x / 8
    @tilemap.oy = $game_srpg.display_y / 8
    @tilemap.update
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def update_parallax
    if @parallax_name != $game_srpg.parallax_name
      @parallax_name = $game_srpg.parallax_name
      if @parallax.bitmap != nil
        @parallax.bitmap.dispose
        @parallax.bitmap = nil
      end
      if @parallax_name != ""
        @parallax.bitmap = Cache.parallax(@parallax_name)
      end
      Graphics.frame_reset
    end
    @parallax.ox = $game_srpg.calc_parallax_x(@parallax.bitmap)
    @parallax.oy = $game_srpg.calc_parallax_y(@parallax.bitmap)
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #update1.001
  #--------------------------------------------------------------------------
  def update_weather
    @weather.type = $game_srpg.screen.weather_type
    @weather.max = $game_srpg.screen.weather_max
    @weather.ox = $game_srpg.display_x / 8
    @weather.oy = $game_srpg.display_y / 8
    @weather.update
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def update_viewports
    @viewport1.tone = $game_srpg.screen.tone
    @viewport1.ox = $game_srpg.screen.shake
    @viewport2.color = $game_srpg.screen.flash_color
    @viewport3.color.set(0, 0, 0, 255 - $game_srpg.screen.brightness)
    @viewport1.update
    @viewport2.update
    @viewport3.update
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def update_cursor
    @cursor_sprite.update
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def update_effect_area
    return if $scene.event == nil
    @effect_area_sprite.x = @cursor_sprite.cell_x - 256
    @effect_area_sprite.y = @cursor_sprite.cell_y - 192
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def clear_flash
    for x in 0...$game_srpg.width
      for y in 0...$game_srpg.height
        @tilemap.flash_data[x, y] = 0x000
      end
    end
    @effect_area_sprite.visible = false
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #--------------------------------------------------------------------------
  def refresh_area
    state = $game_srpg.enemy_turn? ? $game_srpg.scene_state - 100 : $game_srpg.scene_state
    if (state >= 2 and state <= 5) or state == 70
      # ?????????
      for pos in $scene.attack_cell
        @tilemap.flash_data[pos[0], pos[1]] = 0xf22
      end
    else
      # ?????????
      for pos in $scene.movable_cell.keys
        if $scene.movable_cell[pos] != ""
          @tilemap.flash_data[pos[0], pos[1]] = 0x22f
        end
      end
    end
    refresh_effect_area   # ???????????????
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #--------------------------------------------------------------------------
  def refresh_effect_area
    @effect_area_sprite.bitmap.clear
    color = Color.new(255, 255, 0, 128)
    for pos in $scene.effect_cell
      @effect_area_sprite.bitmap.fill_rect((8 + pos[0]) << 5,
        (6 + pos[1]) << 5, 32, 32, color) 
    end
    @effect_area_sprite.visible = true
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def animation?
    for sprite in @character_sprites
      return true if sprite.animation?
    end
    return false
  end
end


-------------------------------------Window_Base---------------------------------
#==============================================================================
# ¦ Window_Base
#==============================================================================
class Window_Base < Window
  #--------------------------------------------------------------------------
  # ? HP ???
  #     actor : ????
  #     x     : ??? X ??
  #     y     : ??? Y ??
  #     width : ?
  #--------------------------------------------------------------------------
  alias tsrpg_window_base_draw_actor_hp draw_actor_hp
  def draw_actor_hp(actor, x, y, width = 120)
    if actor.actor?
      tsrpg_window_base_draw_actor_hp(actor, x, y, width)
    else
      type = TSRPG::BOSS_HP_TYPE[actor.enemy_id]
      if type != nil and (type != 0 and actor.hp >= type)
        draw_boss_hp(actor, x, y, width)
      else
        tsrpg_window_base_draw_actor_hp(actor, x, y, width)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ???HP ???
  #--------------------------------------------------------------------------
  def draw_boss_hp(actor, x, y, width = 120)
    self.contents.font.color = system_color
    self.contents.draw_text(x, y, 30, WLH, Vocab::hp_a)
    self.contents.font.color = normal_color
    xr = x + width
    if width < 120
      self.contents.draw_text(xr - 40, y, 40, WLH, "????", 2)
    else
      self.contents.draw_text(xr - 90, y, 40, WLH, "????", 2)
      self.contents.font.color = normal_color
      self.contents.draw_text(xr - 50, y, 10, WLH, "/", 2)
      self.contents.draw_text(xr - 40, y, 40, WLH, "????", 2)
    end
  end
end


---------------------------------Window_Selectable / Item----------------------------
#==============================================================================
# ¦ Window_Selectable
#==============================================================================
class Window_Selectable < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def set_column(column)
    @column_max = column
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ???(SRPG?)
  #--------------------------------------------------------------------------
  def close_ex
    close
    self.active = false
  end
end

#==============================================================================
# ¦ Window_Item
#==============================================================================
class Window_Item < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ????????????????
  #     item : ????
  #--------------------------------------------------------------------------
  def include?(item)
    return false if item == nil
    if $game_temp.in_battle or $game_temp.in_srpg
      return false unless item.is_a?(RPG::Item)
    end
    return true
  end
end


----------------------------------Window_Action-----------------------------------
#==============================================================================
# ¦ Window_Action
#==============================================================================
class Window_Action < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ?????????
  #     actor  : ????
  #--------------------------------------------------------------------------
  def initialize(actor)
    super(0, 56, 256, 176)
    @actor = actor
    @column_max = 1
    self.index = 0
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def skill
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #update1.004
  #--------------------------------------------------------------------------
  def refresh
    @data = []
    #@data.push($data_skills[1])
    for skill in @actor.skills
      next unless skill.battle_ok?
      @data.push(skill)
      self.index = @data.size - 1 if skill.id == @actor.last_skill_id
    end
    #@data.push($data_skills[2])
    #@data.push($data_skills[3])
    @item_max = @data.size
    create_contents
    for i in 0...@item_max do draw_item(i) end
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #     index : ????
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect(index)
    self.contents.clear_rect(rect)
    skill = @data[index]
    if skill != nil
      rect.width -= 4
      enabled = @actor.skill_can_use?(skill)
      draw_item_name(skill, rect.x, rect.y, enabled)
      self.contents.draw_text(rect, @actor.calc_mp_cost(skill), 2)
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def update_help
    @help_window.set_text(skill == nil ? "" : skill.description)
  end
end


--------------------------------------Window_Status_Srpg-------------------------
#==============================================================================
# ¦ Window_Status_Srpg
#------------------------------------------------------------------------------
#  SRPG???????????????????
#==============================================================================

class Window_Status_Srpg < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x : ?????? X ??
  #     y : ?????? Y ??
  #--------------------------------------------------------------------------
  def initialize(x, y)
    super(x, y, 544, 152)
    self.z = 140
    self.opacity = 0
    self.visible = false
    @back_sprite = Sprite.new
    @back_sprite.bitmap = Cache.system("MessageBack")
    @back_sprite.visible = false
    @back_sprite.x = x
    @back_sprite.y = y
    @back_sprite.z = 135
    @cx, @cy = 0, 0
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def dispose
    @back_sprite.dispose
    super
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def update
    if $game_srpg.scene_state <= 5
      if @cx != $game_cursor.x or @cy != $game_cursor.y
        @cx, @cy = $game_cursor.x, $game_cursor.y
        refresh($game_srpg.alive_unit_xy(@cx, @cy))
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #update1.011
  #--------------------------------------------------------------------------
  def refresh(attacker, target = nil)
    self.contents.clear
    # ???????????????????
    if attacker == nil
      self.contents.draw_text(0, 0, 240, WLH, make_text_tile(@cx, @cy))
      @back_sprite.visible = false
      return
    end
    self.contents.font.color.alpha = 128 if attacker.unit.float?
    self.contents.draw_text(0, 0, 240, WLH, make_text_tile(attacker.x, attacker.y))
    self.contents.font.color.alpha = 255
    draw_face(attacker.face_name, attacker.face_index, 0, WLH * 1)
    self.contents.draw_text(0, WLH * 1, 96, WLH, attacker.unit.name)
    draw_actor_state(attacker.unit, 96, WLH * 2, 120)
    draw_actor_hp(attacker.unit, 96, WLH * 3)
    draw_actor_mp(attacker.unit, 96, WLH * 4)
    if target != nil
      attacker.back_attack?(target)           # ?????????????
      @attacker = attacker
      @target = target
      # ??????????
      self.contents.font.color.alpha = 128 if target.unit.float?
      self.contents.draw_text(272, 0, 240, WLH, make_text_tile(target.x, target.y), 2)
      self.contents.font.color.alpha = 255
      draw_face(target.face_name, target.face_index, 406, WLH * 1)
      self.contents.draw_text(406, WLH * 4, 96, WLH, target.unit.name, 2)
      draw_actor_hp(target.unit, 286, WLH * 1)
      draw_actor_mp(target.unit, 286, WLH * 2)
      draw_actor_state(target.unit, 286, WLH * 3, 120)
      # ??????
      self.contents.draw_text(240, WLH * 3 - 12, 32, WLH, "->", 1)
      # ????
      if attacker.unit.action.attack?
        @obj = nil
        @damage = target.unit.get_attack_damage(attacker.unit)
        text = sprintf("%+d (%d%%)", (0 - @damage), get_hit_rate)
        n = $scene.get_counter_rate(attacker, target)
        if n > 0
          self.contents.draw_text(230, WLH * 4, 168, WLH, sprintf("Counter %d%", n), 2)
        end
      # ???
      elsif attacker.unit.action.skill?
        @obj = attacker.unit.action.skill
        @damage = target.unit.get_obj_damage(attacker.unit, @obj)
        text = make_text_obj(@obj.damage_to_mp)
      # ????
      elsif attacker.unit.action.item?
        @obj = attacker.unit.action.item
        hp_recovery = target.unit.calc_hp_recovery(attacker.unit, @obj) # HP ?????
        mp_recovery = target.unit.calc_mp_recovery(attacker.unit, @obj) # MP ?????
        @damage = target.unit.get_obj_damage(attacker.unit, @obj)
        if target.unit.zombie?                    # ???????????
          hp_recovery = 0 - hp_recovery
          mp_recovery = 0 - mp_recovery
        end
        @damage -= hp_recovery                     # HP ????????
        if @obj.damage_to_mp or (@damage == 0 and mp_recovery != 0)
          @damage -= mp_recovery                   # MP ????????
          text = make_text_obj(true)
        else
          text = make_text_obj(false)
        end
      end
      self.contents.draw_text(112, WLH * 1, 176, WLH, text)
      @back_sprite.visible = true
    else
      @back_sprite.visible = false
    end
    self.visible = true
  end
  #--------------------------------------------------------------------------
  # ? ???(?????)???
  #--------------------------------------------------------------------------
  def get_hit_rate
    hit = @target.unit.calc_hit(@attacker.unit, @obj)
    hit = hit * (100 - @target.unit.calc_eva(@attacker.unit, @obj)) / 100
    return hit
  end
  #--------------------------------------------------------------------------
  # ? ??(??)??????????
  #--------------------------------------------------------------------------
  def get_state_text
    if @obj.plus_state_set.size > 0
      text = sprintf("+%s", $data_states[@obj.plus_state_set[0]].name)
    elsif @obj.minus_state_set.size > 0
      text = sprintf("-%s", $data_states[@obj.minus_state_set[0]].name)
    else
      text = ""
    end
    return text
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def make_text_obj(mp_flag)
    if @obj.id == 3   # ??
      text = sprintf("%s (100%%)", Vocab::guard)
    elsif @damage == 0 and @obj.base_damage == 0
      text = sprintf("%s (%d%%)", get_state_text, get_hit_rate)
    else
      text = sprintf("%+d (%d%%) %s", (0 - @damage), get_hit_rate, get_state_text)
    end
    text = sprintf("%s %s",Vocab::mp , text) if mp_flag
    return text
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def make_text_tile(x, y)
    tile_effect = $game_srpg.tile_effect(x, y)
    return TSRPG::TILE_EFFECT[tile_effect][0]
  end
end


----------------------------------Window_Message_Mini--------------------------
#==============================================================================
# ¦ Window_Message_Mini
#==============================================================================
class Window_Message_Mini < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x : ?????? X ??
  #     y : ?????? Y ??
  #--------------------------------------------------------------------------
  def initialize(x, y)
    super(x, y, 544, WLH * 1 + 32)
    self.openness = 0
    @count = 0
  end
  #--------------------------------------------------------------------------
  # ? ??
  #--------------------------------------------------------------------------
  def update
    super
    @count -= 1
    close if @count == 0
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh(text, count = 90)
    self.contents.clear
    self.contents.draw_text(0, 0, 512, WLH, text, 1)
    @count = count
    open
  end
end


------------------------------------Window_Unit / Info ---------------------------
#==============================================================================
# ¦ Window_Unit
#==============================================================================
class Window_Unit < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_accessor   :last_index              # ?????????
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x      : ?????? X ??
  #     y      : ?????? Y ??
  #     width  : ???????
  #     height : ????????
  #--------------------------------------------------------------------------
  def initialize(x, y, width, height)
    super(x, y, width, height)
    @column_max = 1
    self.openness = 0
    self.active = false
    self.z = 150
    @last_index = -1
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def item
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #     event : ????
  #--------------------------------------------------------------------------
  def include?(event)
    return false if event == nil
    return false if event.enemy_id == -1
    return false if $game_srpg.scene_state == 54 and not event.unit.actor?
    return true
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #     event : ????
  #--------------------------------------------------------------------------
  def enable?(event)
    return event.unit.dead?
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    self.index = 0
    @data = []
    for event in $game_srpg.unit_list
      next unless include?(event)
      @data.push(event)
    end
    @data.push(nil) if include?(nil)
    @item_max = @data.size
    create_contents
    for i in 0...@item_max do draw_item(i) end
    self.active = true
    open
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #     index : ????
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect(index)
    self.contents.clear_rect(rect)
    event = @data[index]
    if event != nil
      enabled = enable?(event)
      rect.width -= 4
      self.contents.font.color.alpha = enabled ? 128 : 255
      self.contents.draw_text(rect, event.unit.name)
    end
  end
end

#==============================================================================
# ¦ Window_Info
#------------------------------------------------------------------------------
#  SRPG???????????????????
#==============================================================================

class Window_Info < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x : ?????? X ??
  #     y : ?????? Y ??
  #--------------------------------------------------------------------------
  def initialize(x, y)
    super(x, y, 384, 416)
    self.openness = 0
    self.z = 150
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #     actor : ????
  #     x     : ??? X ??
  #     y     : ??? Y ??
  #     type  : ?????? (0~3)
  #--------------------------------------------------------------------------
  def draw_actor_parameter(actor, x, y, type)
    case type
    when 0
      parameter_name = Vocab::atk
      parameter_value = actor.atk
    when 1
      parameter_name = Vocab::def
      parameter_value = actor.def
    when 2
      parameter_name = Vocab::spi
      parameter_value = actor.spi
    when 3
      parameter_name = Vocab::agi
      parameter_value = actor.agi
    when 4
      parameter_name = Vocab::counter
      parameter_value = actor.counter_power
    when 5
      parameter_name = Vocab::coop
      parameter_value = actor.coop_power
    when 6
      parameter_name = Vocab::hit
      parameter_value = actor.hit
    when 7
      parameter_name = Vocab::eva
      parameter_value = actor.eva
    when 8
      parameter_name = Vocab::cri
      parameter_value = actor.cri
    end
    self.contents.font.color = system_color
    self.contents.draw_text(x, y, 64, WLH, parameter_name)
    self.contents.font.color = normal_color
    self.contents.draw_text(x + 64, y, 52, WLH, parameter_value, 2)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh(event = nil)
    self.contents.clear
    # ???????????????????
    if event == nil
      self.contents.font.color = normal_color
      text = $data_mapinfos[$game_srpg.map_id].name
      self.contents.draw_text(4, 0, 344, WLH, text)
      text = sprintf("Turn : %d", $game_troop.turn_count)
      self.contents.draw_text(4, WLH * 1, 344, WLH, text)
      text = sprintf("Player : %d", $game_srpg.alive_actor_num)
      self.contents.draw_text(4, WLH * 2, 344, WLH, text)
      text = sprintf("Enemy : %d", $game_srpg.alive_enemy_num)
      self.contents.draw_text(4, WLH * 3, 344, WLH, text)
      y = WLH * 7
      if $game_variables[TSRPG::RULE_FLAG] & 1 == 1
        self.contents.draw_text(4, y, 344, WLH, "-Defeat all enemies!")
        y += WLH
      end
      if $game_variables[TSRPG::RULE_FLAG] & 4 == 4
        text = sprintf("-Survive for %d turns!", $game_variables[TSRPG::RULE_OPTION])
        self.contents.draw_text(4, y, 344, WLH, text)
        y += WLH
      end
      if $game_variables[TSRPG::RULE_FLAG] & 8 == 8
        text = sprintf("-Finish in %d turns!!", $game_variables[TSRPG::RULE_OPTION])
        self.contents.draw_text(4, y, 344, WLH, text)
        y += WLH
      end
      if $game_variables[TSRPG::RULE_FLAG] & 16 == 16
        text = sprintf("-Hurry to target point!")
        self.contents.draw_text(4, y, 344, WLH, text)
        y += WLH
      end
      for event in $game_srpg.unit_list
        if event.boss_flag
          text = sprintf("-Defeat %s!", event.unit.name)
          self.contents.draw_text(4, y, 344, WLH, text)
          y += WLH
        end
        if event.guard_flag
          text = sprintf("-Protect %s!", event.unit.name)
          self.contents.draw_text(4, y, 344, WLH, text)
          y += WLH
        end
      end
      self.contents.draw_text(5, WLH * 5, 64, WLH, "Gold")
      draw_currency_value($game_party.gold, 64, WLH * 5, 120)
    # ?????????????????????
    else
      actor = event.unit
      draw_actor_name(actor, 4, 0)
      draw_actor_face(event, 8, 32)
      draw_actor_state(actor, 128, 32 + WLH * 1)
      draw_actor_hp(actor, 128, 32 + WLH * 2)
      draw_actor_mp(actor, 128, 32 + WLH * 3)
      for i in 0...9
        draw_actor_parameter(actor, 4, 160 + WLH * i, i)
      end
      # ?????
      if event.enemy_flag     # ????????
        note = $data_enemies[event.enemy_id].note
        text = note =~ TSRPG::Pattern::CLASS ? $1 : ""      # ?????
        self.contents.draw_text(128, 0, 108, WLH, text)
        if note =~ TSRPG::Pattern::EQUIP                    # ?????
          draw_item_name($data_weapons[$1.to_i], 160, 160)
          draw_item_name($data_armors[$2.to_i], 160, 160 + WLH)
          draw_item_name($data_armors[$3.to_i], 160, 160 + WLH * 2)
          draw_item_name($data_armors[$4.to_i], 160, 160 + WLH * 3)
          draw_item_name($data_armors[$5.to_i], 160, 160 + WLH * 4)
        end
        draw_actor_level(actor, 128, 32) if actor.level > 0 # ??????
      else                    # ?????????
        draw_actor_class(actor, 128, 0)
        draw_actor_level(actor, 128, 32)
        for i in 0..4
          draw_item_name(actor.equips[i], 160, 160 + WLH * i)
        end
        # if using Card Slot
        if actor.weight != nil
          self.contents.font.color = system_color
          self.contents.draw_text(160, 160 + WLH * 6, 48, WLH, "Wt")
          self.contents.font.color = actor.over_weight? ? knockout_color : normal_color
          self.contents.draw_text(208, 160 + WLH * 6, 52, WLH, actor.weight, 2)
          self.contents.font.color = normal_color
          self.contents.draw_text(260, 160 + WLH * 6, 24, WLH, "/", 1)
          self.contents.draw_text(284, 160 + WLH * 6, 52, WLH, TIEX::JOB_WEIGHT_MAX[actor.class_id], 2)
        end
      end
    end
    open
  end
end


-----------------------------Scene_Title/ Equip / File/ Shop----------------------------
#==============================================================================
# ¦ Scene_Title
#==============================================================================
class Scene_Title < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_title_create_game_objects create_game_objects
  def create_game_objects
    tsrpg_scene_title_create_game_objects
    $game_srpg          = Game_Srpg.new    # SRPG?????????
  end
end

#==============================================================================
# ¦ Scene_Equip
#==============================================================================
class Scene_Equip < Scene_Base
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_equip_return_scene return_scene
  def return_scene
    if $game_temp.in_srpg_equip
      $game_temp.in_srpg_equip = false
      $scene = Scene_Srpg.new
    else
      tsrpg_scene_equip_return_scene
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_equip_next_actor next_actor
  def next_actor
    tsrpg_scene_equip_next_actor unless $game_temp.in_srpg_equip
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_equip_prev_actor prev_actor
  def prev_actor
    tsrpg_scene_equip_prev_actor unless $game_temp.in_srpg_equip
  end
end

#==============================================================================
# ¦ Scene_File
#==============================================================================
class Scene_File < Scene_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     saving      : ?????? (false ???????)
  #     from_title  : ????????????????????????
  #     from_event  : ???????????????????????????
  #     from_srpg   : SRPG???????????????????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_file_initialize initialize
  def initialize(saving, from_title, from_event, from_srpg = false)
    tsrpg_scene_file_initialize(saving, from_title, from_event)
    @from_srpg = from_srpg
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_file_return_scene return_scene
  def return_scene
    if @from_srpg
      $scene = Scene_Srpg.new
    else
      tsrpg_scene_file_return_scene
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #     file : ??????????????? (??????)
  #--------------------------------------------------------------------------
  alias tsrpg_scene_file_write_save_data write_save_data
  def write_save_data(file)
    $game_system.in_srpg = @from_srpg
    tsrpg_scene_file_write_save_data(file)
    Marshal.dump($game_srpg,         file)
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #     file : ??????????????? (??????)
  #--------------------------------------------------------------------------
  alias tsrpg_scene_file_read_save_data read_save_data
  def read_save_data(file)
    tsrpg_scene_file_read_save_data(file)
    $game_srpg       = Marshal.load(file)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  alias tsrpg_scene_file_do_load do_load
  def do_load
    file = File.open(@savefile_windows[@index].filename, "r")
    begin
      @characters     = Marshal.load(file)
      @frame_count    = Marshal.load(file)
      @last_bgm       = Marshal.load(file)
      @last_bgs       = Marshal.load(file)
      @game_system    = Marshal.load(file)
    ensure
      file.close
    end
    if @game_system.in_srpg
      file = File.open(@savefile_windows[@index].filename, "rb")
      read_save_data(file)
      file.close
      $scene = Scene_Srpg.new
      RPG::BGM.fade(1500)
      Graphics.fadeout(60)
      Graphics.wait(40)
      @last_bgm.play
      @last_bgs.play
      $game_cursor = Game_Cursor.new
    else
      tsrpg_scene_file_do_load
    end
  end
end

#==============================================================================
# ¦ Scene_Shop
#==============================================================================
class Scene_Shop < Scene_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.008
  #--------------------------------------------------------------------------
  def update_command_selection
    if Input.trigger?(Input::B)
      Sound.play_cancel
      if $game_temp.in_srpg_equip
        $game_temp.in_srpg_equip = false
        $scene = Scene_Srpg.new
      else
        $scene = Scene_Map.new
      end
    elsif Input.trigger?(Input::C)
      case @command_window.index
      when 0  # ????
        Sound.play_decision
        @command_window.active = false
        @dummy_window.visible = false
        @buy_window.active = true
        @buy_window.visible = true
        @buy_window.refresh
        @status_window.visible = true
      when 1  # ????
        if $game_temp.shop_purchase_only
          Sound.play_buzzer
        else
          Sound.play_decision
          @command_window.active = false
          @dummy_window.visible = false
          @sell_window.active = true
          @sell_window.visible = true
          @sell_window.refresh
        end
      when 2  # ???
        Sound.play_decision
        if $game_temp.in_srpg_equip
          $game_temp.in_srpg_equip = false
          $scene = Scene_Srpg.new
        else
          $scene = Scene_Map.new
        end
      end
    end
  end
end
----------------------------------------Scene_Srpg---------------------------------------
#==============================================================================
# ¦ Scene_Srpg
#==============================================================================
if $data_mapinfos == nil
  $data_mapinfos = load_data("Data/MapInfos.rvdata")
end

class Scene_Srpg < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_reader   :event                      # ????????
  attr_reader   :movable_cell               # ??????????
  attr_reader   :attack_cell                # ??????
  attr_reader   :effect_cell                # ??????
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def start
    super
    $game_srpg.refresh
    @spriteset      = Spriteset_Srpg.new
    @message_window = Window_Message.new
    $game_temp.in_srpg = true         # SRPG???????
    create_window                     # ??????????
    @action_result_exp = 0
    @action_result_item = []
    @action_result_gold = 0
    @attack_cell = []
    @effect_cell = []
    @attack_target = []
    @movable_cell = {}
    @unit_list_index = 0
    @cursor_x = 0
    @cursor_y = 0
  end
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def terminate
    super
    dispose_window                    # ??????????
    snapshot_for_background
    @spriteset.dispose
    @message_window.dispose
    if $scene.is_a?(Scene_Battle)     # ??????????????
      perform_battle_transition       # ????????????
    end
    $game_temp.in_srpg = false        # SRPG??????
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def dispose_window
    @help_window.dispose if @help_window != nil
    @help_window = nil
    @menu_window.dispose if @menu_window != nil
    @menu_window = nil
    @command_window.dispose if @command_window != nil
    @command_window = nil
    @status_window.dispose if @status_window != nil
    @status_window = nil
    @message_mini_window.dispose if @message_mini_window != nil
    @message_mini_window = nil
    @unit_window.dispose if @unit_window != nil
    @unit_window = nil
    @info_window.dispose if @info_window != nil
    @info_window = nil
    @skill_window.dispose if @skill_window != nil
    @skill_window = nil
    @item_window.dispose if @item_window != nil
    @item_window = nil
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????????
  #--------------------------------------------------------------------------
  def focus_actor
    @unit_list_index = -1
    focus_unit_list(1)
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????
  #--------------------------------------------------------------------------
  def focus_enemy
    @unit_list_index = -1
    for event in $game_srpg.unit_list
      @unit_list_index += 1
      break if event.enemy_flag
    end
    @unit_list_index -= 1
    focus_unit_list(1)
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  def focus_attack_target(shift = 0)
    return if @attack_target.size == 0
    @index_focus += shift
    @index_focus = 0 if @index_focus >= @attack_target.size
    @index_focus = @attack_target.size - 1 if @index_focus < 0
    focus_event(@attack_target[@index_focus])
  end
  #--------------------------------------------------------------------------
  # ? ????(????)??????????
  #--------------------------------------------------------------------------
  def focus_unit_list(shift = 1)
    @unit_list_index += shift
    n = $game_srpg.unit_list.size   # ?????????
    while(1)
      @unit_list_index = 0     if @unit_list_index >= n
      @unit_list_index = n - 1 if @unit_list_index < 0
      break unless $game_srpg.unit_list[@unit_list_index].unit.dead?
      @unit_list_index += shift
    end
    focus_event($game_srpg.unit_list[@unit_list_index])
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????
  #--------------------------------------------------------------------------
  def focus_event(event)
    $game_cursor.set_auto_move(event.x, event.y)
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????
  #--------------------------------------------------------------------------
  def auto_end?
    for event in $game_srpg.alive_actor_list
      return false unless event.action_end
      return false unless event.move_end
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ?????????????(??????)
  #--------------------------------------------------------------------------
  def check_movable_cell(x, y, dist, prev, way)
    @movable_cell[[x, y]] = "" if @movable_cell[[x, y]] == nil
    return if @movable_cell[[x, y]] != "" and way.length > @movable_cell[[x, y]].length
    return if dist - 1 < 0                # ??????????????
    return if @map_pass_all[x + 1, y + 1] == 0    # ??????????
    @movable_cell[[x, y]] = way
    check_movable_cell(x, y - 1, dist - 1, 4, way + "4") unless prev == 1
    check_movable_cell(x + 1, y, dist - 1, 3, way + "3") unless prev == 2
    check_movable_cell(x, y + 1, dist - 1, 1, way + "1") unless prev == 4
    check_movable_cell(x - 1, y, dist - 1, 2, way + "2") unless prev == 3
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #update1.011
  #--------------------------------------------------------------------------
  def make_movable_cell
    @movable_cell.clear           # ?????????????
    d = @event.unit.move_power    # ????????
    # ????????????????
    if @event.unit.float?
      @map_pass_all = $game_srpg.map_pass_float.clone
    elsif @event.unit.spider?
      @map_pass_all = $game_srpg.map_pass_spider.clone
    elsif @event.unit.submarine?
      @map_pass_all = $game_srpg.map_pass_submarine.clone
    else
      @map_pass_all = $game_srpg.map_pass_normal.clone
    end
    for x in @event.x - d..@event.x + d
      for y in @event.y - d..@event.y + d
        next unless $game_srpg.valid?(x, y)       # ???????
        next if @map_pass_all[x + 1, y + 1] == 0  # ?????????
        event = $game_srpg.alive_unit_xy(x, y)    # ???????????
        next if event == nil                      # ???????????
        if event.enemy_flag == @event.enemy_flag  # ??????
          if event.pnpc != @event.pnpc or event.npc != @event.npc
            @map_pass_all[x + 1, y + 1] = 0 # ???NPC?PNPC??????
          end
        elsif event.pnpc == @event.pnpc           # ??????
          @map_pass_all[x + 1, y + 1] = 0   # ???PNPC?????????
        end
      end
    end
    # ?????
    check_movable_cell(@event.x, @event.y - 1, d, 4, "4")
    check_movable_cell(@event.x + 1, @event.y, d, 3, "3")
    check_movable_cell(@event.x, @event.y + 1, d, 1, "1")
    check_movable_cell(@event.x - 1, @event.y, d, 2, "2")
    # ??????????????????????
    for event in $game_srpg.alive_unit_list
      @movable_cell[[event.x, event.y]] = ""
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def make_move_route(x, y)
    move_route = RPG::MoveRoute.new
    move_route.repeat = false
    move_route.wait = true
    if Input.press?(Input::Z)   # Z???????????????
      move_route.list[0] = RPG::MoveCommand.new(29, [6])  # ?????4???
    else
      move_route.list[0] = RPG::MoveCommand.new(29, [5])  # ?????2???
    end
    for i in 0...@movable_cell[[x, y]].length
      n = $1.to_i if @movable_cell[[x, y]] =~ /^(\d)/i
      @movable_cell[[x, y]].gsub!(/^\d/) { "" }
      move_route.list.push(RPG::MoveCommand.new(n))
    end
    move_route.list.push(RPG::MoveCommand.new(29, [4])) # ????????
    move_route.list.push(RPG::MoveCommand.new(0))
    @event.force_move_route(move_route)
    @event.move_end = true    # ???????????
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #update1.006
  #--------------------------------------------------------------------------
  def make_attack_cell_table(attacker, obj = nil)
    if $game_srpg.scene_state == 5    # ???????
      x, y = attacker.x, attacker.y
      return [[x, y - 1], [x - 1, y], [x + 1, y], [x, y + 1]]
    end
    attack_cell = []
    obj = attacker.unit.action.obj if obj == nil
    if obj.is_a?(RPG::Skill) and obj.weapon_skill?  # ???????
      obj = attacker.unit # ????????????????????
    end
    range      = obj.atk_range
    range_type = obj.atk_range_type
    hole       = obj.atk_hole
    tile       = obj.atk_tile
    if TSRPG::CUSTOM_RANGE[range_type] != nil   # ?????????
      for pos in TSRPG::CUSTOM_RANGE[range_type]
        x = attacker.x + pos[0]
        y = attacker.y + pos[1]
        next if tile and not $game_srpg.tile_passable?(x, y)  # ?????????
        attack_cell.push([x, y])
      end
    else
      for x in attacker.x - range...attacker.x + range + 1
        for y in attacker.y - range...attacker.y + range + 1
          d = (attacker.x - x).abs + (attacker.y - y).abs
          next if d <= hole            # ???????
          next if tile and not $game_srpg.tile_passable?(x, y)  # ?????????
          if range_type == 0
            next if d > range          # ?????????
          elsif range_type == 1
            next if x != attacker.x and y != attacker.y # ????????????
          end
          attack_cell.push([x, y])
        end
      end
    end
    return attack_cell
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def check_attack_cell
    @attack_cell.clear
    @attack_cell = make_attack_cell_table(@event)
    # ?????????????????
    @attack_target.clear
    obj = @event.unit.action.obj
    if obj != nil and obj.atk_size == 0
      if @event.unit.action.attack?   # ????
        add_target(!@event.enemy_flag, false)
      else
        add_target(obj.for_friend? ? @event.enemy_flag : !@event.enemy_flag,
          obj.noself?)
      end
    end
    unless @event.enemy_flag
      @index_focus = 0
      focus_attack_target       # ????????????????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #   # flag : ????????????????true????
  #   # noself : ?????????????
  #--------------------------------------------------------------------------
  def add_target(flag, noself)
    targets = flag ? $game_srpg.alive_enemy_list + $game_srpg.alive_actor_list :
      $game_srpg.alive_unit_list
    for event in targets
      if @attack_cell.include?([event.x, event.y])
        @attack_target.push(event) unless noself and event.id != @event.id
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def check_effect_cell
    if $game_srpg.scene_state == 1 or $game_srpg.scene_state == 5 or
       $game_srpg.scene_state == 101  # ?????? or ???????
      @effect_cell = [[0, 0]]           # ?????1?????
      return
    end
    @effect_cell.clear
    obj       = @event.unit.action.obj
    size      = obj.atk_size
    size_type = obj.atk_size_type

    if TSRPG::CUSTOM_RANGE[size_type] != nil    # ?????????
      for pos in TSRPG::CUSTOM_RANGE[size_type]
        @effect_cell.push(pos)
      end
    elsif size_type == 3                        # ???????
      dx, dy = @event.x - @cursor_x, @event.y - @cursor_y
      if dx == 0 and dy == 0
        return
      elsif dx.abs > dy.abs
        n = dy.to_f / dx
        for i in [0, dx].min..[0, dx].max
          @effect_cell.push([i, (i * n).round]) if i != dx
        end
      else
        n = dx.to_f / dy
        for i in [0, dy].min..[0, dy].max
          @effect_cell.push([(i * n).round, i]) if i != dy
        end
      end
    elsif size_type == 1 #linear
        range = obj.atk_range
        dx, dy = @event.x - @cursor_x, @event.y - @cursor_y        
        #p dx.to_s+", "+dy.to_s
        if dy == 0
          if dx < 0 #cursor to the right of user
            for x in dx..0
              @effect_cell.push([x,0])
            end
          elsif dx > 0 #cursor to the left of user
            for x in 0..dx
              @effect_cell.push([x,0])
            end
          end
        elsif dx == 0 #cursor below user
          if dy < 0
            for y in dy..0
              @effect_cell.push([0,y])
            end
          elsif dy > 0 #cursor above user
            for y in 0..dy
              @effect_cell.push([0,y])
            end
          end
        end    
    else                                        # ?? / ?? / ????
      for x in -size...size + 1
        for y in -size...size + 1
          d = x.abs + y.abs
          if (size_type == 0 || size_type == 4)
            next if d > size                # ?????????
          #elsif size_type == 1
          #  next if x != 0 and y != 0       # ????????????
          end
          @effect_cell.push([x, y])
        end
      end
      if (size_type == 4)
        @effect_cell.delete([0,0])
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def attack?(x, y)
    # ???????????????????
    return false unless @attack_cell.include?([x, y])
    obj = @event.unit.action.obj
    if obj.is_a?(RPG::BaseItem) and obj.for_dead_friend?
      # ??????????????????
      for pos in @effect_cell
        return false if $game_srpg.alive_unit_xy(x + pos[0], y + pos[1]) != nil
      end
      return true
    else
      # ??????????????????????
      for pos in @effect_cell
        return true unless $game_srpg.target_xy(x + pos[0], y + pos[1]).empty?
      end
    end
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #update1.003
  #update1.012
  #update1.0121
  #--------------------------------------------------------------------------
  def execute_action(x, y)        
    # ???????????????????
    unless @attack_cell.include?([x, y]) or obj.teleport?
      p "returning"
      Sound.play_buzzer
      return
    end
    $game_variables[TSRPG::ATTACKER_BATTLER_ID] = event.unit.id
    # ??????????????????????
    @action_result_exp = 0
    @action_result_item.clear
    @action_result_gold = 0
    targets = []                        # ???????????
    @coop_unit_list = []
    obj = @event.unit.action.obj
    for pos in @effect_cell      
      begin
        if obj.hitall?
            units = $game_srpg.alive_unit_list
            for event in units
              targets.push(event)
            end
        else        
          event = $game_srpg.target_xy(x + pos[0], y + pos[1])[0]
          targets.push(event) if event != nil
          $game_variables[TSRPG::TARGET_EVENT_ID] = event.id
        end
      rescue Exception => e
          event = $game_srpg.target_xy(x + pos[0], y + pos[1])[0]
          targets.push(event) if event != nil
          $game_variables[TSRPG::TARGET_EVENT_ID] = event.id
      end
    end
    obj = @event.unit.action.obj
    if obj.is_a?(RPG::BaseItem) and obj.dual? # ????????????????
      targets += targets
    end
    if targets.empty? and !obj.teleport?  # ?????????
       p "returning 2"
      Sound.play_buzzer
      @message_mini_window.refresh("Invalid Target", 60)
      return
    end
    @event.turn_cell(x, y)              # ?????????
    if @event.unit.action.attack?       # ????
      level = execute_action_attack(targets)
    elsif @event.unit.action.skill?     # ???
      level = execute_action_obj(targets)
    elsif @event.unit.action.item?      # ????
      level = execute_action_obj(targets)
    end
    @event.action_end = true              # ???????????
    unless $game_srpg.enemy_turn?         # ??????????
      $game_srpg.scene_state = 0            # ???????????
      @status_window.refresh($game_srpg.alive_unit_xy(x, y))  # ??????????????
    end
    unless @event.enemy_flag              # ??????????
      for event in @coop_unit_list          # ???????????
        next if event.enemy_flag
        exp = @action_result_exp + event.unit.action_exp
        exp = [exp + exp * (level - event.unit.level) * 10 / 100, 1].max
        event.unit.gain_exp(exp / 2 + 1, true)
        event.unit.gain_job_exp(exp, true) if $include_tjex
        text = sprintf("EXP+%d", exp / 2 + 1)
        $game_srpg.add_popup(event.real_x, event.real_y, text, Color.new(255, 255, 255), 1)
      end
      begin 
        exp = @action_result_exp + @event.unit.action_exp
        exp = [exp + exp * (level - @event.unit.level) * 10 / 100, 1].max
        @event.unit.gain_exp(exp, true)
        @event.unit.gain_job_exp(exp, true) if $include_tjex
        text = sprintf("EXP+%d", exp)
        $game_srpg.add_popup(@event.real_x, @event.real_y, text, Color.new(255, 255, 255), 1)
      rescue
      end
    end
    if @action_result_gold > 0        # ?????
      $game_party.gain_gold(@action_result_gold)
      text = sprintf(Vocab::ObtainGold, @action_result_gold, Vocab::gold)
      $game_message.texts.push(text)
    end
    if @action_result_item.size > 0   # ???????
      for item in @action_result_item
        $game_party.gain_item(item, 1)
        text = sprintf(Vocab::ObtainItem, item.name)
        $game_message.texts.push(text)
      end
    end
    wait_for_message
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def execute_action_attack(targets)
    level = 0
    animation_lock = false
    for event in targets
      @event.back_attack?(event)                    # ?????????????
      event.unit.attack_effect(@event.unit)         # ?????????
      if level == 0 and @event.unit.mp >= @event.unit.atk_mp_cost
        @event.unit.mp -= @event.unit.atk_mp_cost   # MP??
      end
      animation_lock = set_animation(event, @event) unless animation_lock
      @message_mini_window.refresh(Vocab::attack)
      set_popup(event, @event)
      coop(event)
      counter(event)
      event.damage(@event)
      event.refresh_state                           # ????????????
      level += (event.unit.level == 0 ? @event.unit.level : event.unit.level)
    end
    return level / targets.size  # ?????????????
  end
  #--------------------------------------------------------------------------
  # ? ???(????)???
  #update1.011
  #--------------------------------------------------------------------------
  #@event is the user, event is the target, obj is the skill
  def execute_action_obj(targets)
    level = 0
    animation_lock = false
    obj = @event.unit.action.obj
    if obj.double_anime > 0         # ??????????
      @event.animation_id = obj.double_anime
      wait_for_animation              # ???????????
    end
    for event in targets
      @event.back_attack?(event)    # ?????????????
      if obj.is_a?(RPG::Skill)      # ??????
        @event.unit.mp -= @event.unit.calc_mp_cost(obj) if level == 0 # MP??
        if obj.id == 2                              # skill id 2 = talk
          talk(event)
          return @event.unit.level  # ?????????
        elsif obj.id == 3                           # skill id 3 = guard
          execute_action_guard
          return @event.unit.level-5  # ?????????
        elsif obj.id == 156 #evolve!
          #add the evolving pokemon's actor id to a list to be operated on at the 
          #end of battle
            $removal.push(event.unit.id)
            #store the evolving pokemon's name and level
            $game_variables[35]=event.unit.name
            $game_variables[36]=event.unit.level
            #call a common event that displays messages
            $game_temp.common_event_id = 42            
            #remove the pokemon from the battle       
            TSRPG::Commands.delete_event(event.id)
            #get out of here
            break
        end
        if event.unit.reflect?                      # ????
          if obj.spi_f > 0 and not obj.physical_attack and
             not obj.pierce? and @event.id != event.id
            event.animation_id = TSRPG::ANIME_REFLECT
            wait_for_animation      # ???????????
            level += @event.unit.level
            targets.push(@event)
            next
          end
        end
        event.unit.skill_effect(@event.unit, obj)   # ????????
      else                          # ???????
        $game_party.consume_item(obj) if level == 0 # ??????
        event.unit.item_effect(@event.unit, obj)    # ?????????
      end
      if event.unit.hp_damage > 0
        steal(event) if rand(100) < obj.steal_rate  # ??
        knock_back(event, obj)                      # ??????
        move_self(@event, event, obj)
      end
      teleport(@event, 7, 8, obj)
      @event.move_end = true if obj.nomove?         # ????
      event.reset if obj.for_dead_friend?           # ????
      animation_lock = set_animation(event, @event, obj) unless animation_lock
      @message_mini_window.refresh(obj.name)        # ???(????)???
      set_popup(event, @event)
      event.damage(@event)
      event.refresh_state                           # ????????????
      if obj.common_event_id > 0                    # ???????
        $game_temp.common_event_id = obj.common_event_id
        $game_temp.common_event_user = @event.id
      end
      level += (event.unit.level == 0 ? @event.unit.level : event.unit.level)
    end
    return level / targets.size  # ?????????????
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def execute_action_guard
    @event.unit.action.set_guard
    @message_mini_window.refresh(Vocab::guard)
    wait(40)
    return
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #update1.008
  #--------------------------------------------------------------------------
  def talk(event)
    return if event.trigger > 0     # ?????????????????
    @message_mini_window.close                  # ???????????
    $game_srpg.talker_pos = [@event.x, @event.y]
    event.start
    wait_for_event
    $game_srpg.talker_pos = nil
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def steal(event)
    return if event.stole           # ????????????
    if event.drop_item([event.unit.drop_item1])
      event.stole = true    # ??????????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????????????
  #--------------------------------------------------------------------------
  def set_animation(target, attacker, obj = nil)
    obj = attacker.unit if obj == nil
    id = obj.animation_id
    id = attacker.unit.atk_animation_id if id < 0 # ???????
    target.animation_id = id
    animation = $data_animations[id]
    return (animation != nil and animation.position == 3)
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????
  #--------------------------------------------------------------------------
  def set_popup(target, attacker)
    wait_for_animation        # ???????????
    obj = attacker.unit.action.obj
    $game_srpg.popup_action_result(target, obj)
    if target.unit.absorbed  # ????????????
      if target.unit.hp_damage >= 0
        $game_srpg.add_popup(@event.real_x, @event.real_y,
          target.unit.hp_damage.to_s, TSRPG::COLOR_HP_GAIN)
      elsif target.unit.mp_damage >= 0
        $game_srpg.add_popup(@event.real_x, @event.real_y,
          target.unit.mp_damage.to_s, TSRPG::COLOR_MP_GAIN)
      end
    end
    wait(TSRPG::ACTION_AFTER_WAIT) unless Input.press?(Input::Z)
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #update1.006
  #--------------------------------------------------------------------------
  def get_counter_rate(target, attacker)
    attack_cell = make_attack_cell_table(attacker, attacker.unit)
    return 0 unless attack_cell.include?([target.x, target.y])  # ??????0%
    return attacker.unit.counter_power
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #update1.007
  #--------------------------------------------------------------------------
  def counter(event)
    return if get_counter_rate(@event, event) <= rand(100)
    event.turn_cell(@event.x, @event.y)     # ?????????????
    Audio.se_play("Audio/SE/Flash2.ogg", 80, 150) # ?????
    event.balloon_id = 5                    # ??????????
    @message_mini_window.refresh(Vocab::counter_action)
    wait(20)
    event.back_attack?(@event)              # ?????????????
    @event.unit.attack_effect(event.unit)   # ?????????
    set_animation(@event, event)            # ???????????
    set_popup(@event, event)                # ??????????
    @event.damage(event)
    @event.refresh_state                    # ????????????
    unless event.enemy_flag                 # ??????????
      exp = (@action_result_exp + event.unit.action_exp) / 2
      exp = [exp + exp * (event.unit.level - @event.unit.level) * 10 / 100, 1].max
      event.unit.gain_exp(exp, true)
      text = sprintf("EXP+%d", exp)
      $game_srpg.add_popup(event.real_x, event.real_y, text, Color.new(255, 255, 255), 1)
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def coop(event)
    # ??????????????????????????
    return if @event.get_distance(event) > 1
    coop_attack($game_srpg.alive_unit_xy(@event.x, @event.y + 1), event)
    coop_attack($game_srpg.alive_unit_xy(@event.x - 1, @event.y), event)
    coop_attack($game_srpg.alive_unit_xy(@event.x + 1, @event.y), event)
    coop_attack($game_srpg.alive_unit_xy(@event.x, @event.y - 1), event)
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #update1.010
  #--------------------------------------------------------------------------
  def coop_attack(attacker, event)
    return if attacker == nil
    return if attacker.id == event.id       # ???????????
    return if event.unit.dead?              # ??????????????
    return if attacker.opponent?(@event)    # ???????
    return if rand(100) >= attacker.unit.coop_power
    @coop_unit_list.push(attacker)          # ?????????
    attacker.turn_cell(event.x, event.y)    # ?????????????
    Audio.se_play("Audio/SE/Flash2.ogg", 80, 130) # ?????
    attacker.balloon_id = 1                 # ??????????
    @message_mini_window.refresh(Vocab::coop_action)
    wait(20)
    attacker.back_attack?(event)            # ?????????????
    event.unit.attack_effect(attacker.unit) # ?????????
    set_animation(event, attacker)          # ???????????
    set_popup(event, attacker)              # ??????????
    event.refresh_state                     # ????????????
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #update1.001
  #update1.011
  #--------------------------------------------------------------------------
  #event is the target, #obj is the skill
  def knock_back(event, obj)
    dist = obj.knock_dist
    return if dist <= 0             # ?????????0??????
    return if event.unit.donback?   # ????????????
    # ??????????????????
    n = 0
    x, y = event.x, event.y
    new_x, new_y = x, y
    if event.unit.float?
      map_pass_all = $game_srpg.map_pass_float
    elsif event.unit.spider?
      map_pass_all = $game_srpg.map_pass_spider
    elsif event.unit.submarine?
      map_pass_all = $game_srpg.map_pass_submarine
    else
      map_pass_all = $game_srpg.map_pass_normal
    end
    for i in 1..dist
      x = $game_srpg.x_with_direction(x, @event.direction)
      y = $game_srpg.y_with_direction(y, @event.direction)
      break if map_pass_all[x + 1, y + 1] == 0            # ????????
      break if $game_srpg.alive_unit_xy(x, y) != nil      # ?????????
      n += 1
      new_x, new_y = x, y
    end
    move_route = RPG::MoveRoute.new
    move_route.repeat = false
    move_route.wait = true
    move_route.list[0] = RPG::MoveCommand.new(35)         # ??????
    move_route.list.push(RPG::MoveCommand.new(29, [5]))   # ?????2??
    # ?????????????
    for i in 0...n
      move_route.list.push(RPG::MoveCommand.new(@event.direction / 2))
    end
    move_route.list.push(RPG::MoveCommand.new(36))        # ??????
    move_route.list.push(RPG::MoveCommand.new(29, [4]))   # ????????
    move_route.list.push(RPG::MoveCommand.new(0))         # ????
    event.force_move_route(move_route)
    # ????????
    event.unit.set_tile_effect($game_srpg.tile_effect(new_x, new_y))
  end
  #--------------------------------------------------------------------------
  # Move self
  #--------------------------------------------------------------------------
  #skilluser is the skill's user, event is the target, #obj is the skill
  def move_self(skilluser, event, obj)
    return if obj.moveself? == nil
    xdiff, ydiff = skilluser.x-event.x,skilluser.y-event.y
    new_x, new_y = 0, 0
    if skilluser.unit.float?
      map_pass_all = $game_srpg.map_pass_float
    elsif skilluser.unit.spider?
      map_pass_all = $game_srpg.map_pass_spider
    elsif skilluser.unit.submarine?
      map_pass_all = $game_srpg.map_pass_submarine
    else
      map_pass_all = $game_srpg.map_pass_normal
    end
    if ydiff.abs > xdiff.abs
      if event.y < skilluser.y        
        new_x, new_y = event.x, event.y+1
      else
        new_x, new_y = event.x, event.y-1
      end
    else
      if event.x < skilluser.x
        new_x, new_y = event.x+1, event.y
      else
        new_x, new_y = event.x-1, event.y
      end
    end
    #don't move if there's a unit in the way
    return if $game_srpg.alive_unit_xy(new_x, new_y) != nil
    #don't move if the new spot is inaccessible
    return if map_pass_all[new_x+1, new_y+1] == 0
    skilluser.moveto(new_x,new_y)
  end
  
  #--------------------------------------------------------------------------
  # Teleport
  #--------------------------------------------------------------------------
  #skilluser is the skill's user, (dest_x,dest_y) is target location, #obj is the skill
  def teleport(skilluser, dest_x, dest_y, obj)
    return if obj.teleport? == nil
    if skilluser.unit.float?
      map_pass_all = $game_srpg.map_pass_float
    elsif skilluser.unit.spider?
      map_pass_all = $game_srpg.map_pass_spider
    elsif skilluser.unit.submarine?
      map_pass_all = $game_srpg.map_pass_submarine
    else
      map_pass_all = $game_srpg.map_pass_normal
    end
    
    #don't move if there's a unit in the way
    return if $game_srpg.alive_unit_xy(dest_x, dest_y) != nil
    #don't move if the new spot is inaccessible
    return if map_pass_all[dest_x+1, dest_y+1] == 0
    skilluser.moveto(dest_x,dest_y)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def add_exp(exp)
    @action_result_exp += exp
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def add_item(item)
    @action_result_item.push(item)
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #--------------------------------------------------------------------------
  def add_gold(gold)
    @action_result_gold += gold
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def check_rule
    return if $game_variables[TSRPG::GAME_RESULT] > 0
    # ????????????
    if $game_variables[TSRPG::RULE_FLAG] & 1 == 1
      if $game_srpg.alive_enemy_num == 0
        $game_srpg.need_refresh = true
        $game_variables[TSRPG::GAME_RESULT] = 1
      end
    end
    # ?????????????
    if $game_variables[TSRPG::RULE_FLAG] & 2 == 2
      if $game_srpg.alive_actor_num == 0
        $game_srpg.need_refresh = true
        $game_variables[TSRPG::GAME_RESULT] = 2
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def perform_transition
    if Graphics.brightness == 0       # ???????????
      fadein(30)
    else                              # ???????????
      Graphics.transition(15)
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     duration : ??
  #    ????????Graphics.fadeout ??????????????????
  #  ???????????????????????????????????
  #--------------------------------------------------------------------------
  def fadein(duration)
    Graphics.transition(0)
    for i in 0..duration-1
      Graphics.brightness = 255 * i / duration
      update_basic
    end
    Graphics.brightness = 255
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update_basic
    Graphics.update                 # ????????
    Input.update                    # ???????
    $game_srpg.update               # ??????
    $game_cursor.update             # ???????
    @spriteset.update               # ???????????
    @message_mini_window.update     # ??????????????
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def wait(duration)
    for i in 0..duration-1
      update_basic
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def wait_for_animation
    wait(1)   # ???????????????????1??????????
    while @spriteset.animation?
      wait(1)
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #update1.004
  #--------------------------------------------------------------------------
  def wait_for_message
    while $game_message.busy
      wait(1)
      @message_window.update
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def wait_for_event
    $game_srpg.interpreter.update               # ?????????
    while($game_srpg.interpreter.running?)      # ????????
      $game_srpg.interpreter.update
      wait(1)
      @message_window.update
      break if $game_temp.next_scene != nil
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #update1.008
  #--------------------------------------------------------------------------
  def update
    super
    $game_srpg.interpreter.update     # ?????????
    $game_srpg.update                 # ??????
    $game_cursor.update               # ???????
    @cursor_x = $game_cursor.x
    @cursor_y = $game_cursor.y
    $game_system.update               # ???????
    @spriteset.update                 # ???????????
    @help_window.update               # ???????????
    @menu_window.update               # ????????????
    @command_window.update            # ????????????
    @status_window.update             # ????????????
    @message_mini_window.update       # ??????????????
    @unit_window.update               # ??????????????
    @info_window.update               # ??????????
    @skill_window.update              # ???????????
    @item_window.update               # ????????????
    @message_window.update            # ?????????????
    unless $game_message.visible      # ??????????
      if $game_temp.next_scene == "gameover"
        $game_temp.next_scene = nil
        $scene = Scene_Gameover.new
      elsif $game_temp.next_scene == "shop"
        change_scene_state(0)       # ?????????
        $game_temp.next_scene = nil
        $game_temp.in_srpg_equip = true
        $scene = Scene_Shop.new
      end
      unless $game_srpg.interpreter.running?
        if $game_srpg.scene_state < 50
          update_cursor
        elsif $game_srpg.enemy_turn?
          update_turn_enemy
        else
          case $game_srpg.scene_state
          when 50;  update_menu_window
          when 51,55,70; update_message_mini_window
          when 52,54; update_unit_window
          when 53,63; update_info_window
          when 60;  update_command_window
          when 61;  update_skill_window
          when 62;  update_item_window
          end
        end
        if $game_temp.srpg_end        # ????????
          $game_temp.srpg_end = false
          #remove the old pokemon
          $removal.each {|x| $game_party.remove_actor(x) }
          #add the new pokemon to the third slot
          $removal.each {|x| KGC::Commands.force_add_battle_member(TSRPG::EVO_CHART[x]) }
          #change the new pokemon's level to the old one's
          $removal.each {|x| $game_actors[TSRPG::EVO_CHART[x]].change_level($game_variables[36], false) }
          $scene = Scene_Map.new
          $game_map.autoplay            # BGM ? BGS ???????
        end
      end
    end
  end
end


----------------------------------------change scene state -----------------------------------
#==============================================================================
# ¦ Scene_Srpg
#==============================================================================
class Scene_Srpg < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????????
  #   index : ?????????????????
  #--------------------------------------------------------------------------
  def change_scene_state(id, index = 0)
    $game_srpg.scene_state = id
    case id
    when 0    # neutral
      @menu_window.close_ex                 # ?????????????
      @command_window.close_ex              # ?????????????
      @unit_window.close_ex                 # ?????????????
      @spriteset.clear_flash                # ?????????
    when 1    # select state moving position
      @command_window.close_ex              # ?????????????
      make_movable_cell                     # ?????????
      check_effect_cell                     # ???????
      @spriteset.refresh_area               # ????????
      @message_mini_window.refresh("Select a Destination", 60)
    when 2..4 # attack/skill/item conditions
      check_attack_cell                     # ?????????
      check_effect_cell                     # ???????
      @skill_window.close_ex                # ????????????
      @item_window.close_ex                 # ?????????????
      @help_window.visible = false          # ???????????????
      @spriteset.refresh_area               # ????????
    when 5    # select orientation
      focus_event(@event)
      check_attack_cell                     # ?????????
      check_effect_cell                     # ???????
      @spriteset.refresh_area               # ????????
      @message_mini_window.refresh("Set Face Direction", 60)
    when 50   # status menu command
      open_menu_window(index)
      @unit_window.close_ex                 # ?????????????
      @info_window.close
      @message_mini_window.close
    when 51   # end turn confirmation
      @menu_window.close_ex
      @message_mini_window.refresh("End your turn?", 999999)
    when 52,54  # list of selected state or target state
      @menu_window.close_ex
      @unit_window.refresh
      @last_focus_x = @cursor_x
      @last_focus_y = @cursor_y
    when 53   # information state strategy
      @info_window.refresh(nil)
      @menu_window.active = false
    when 55   # waiting confirmation
      @command_window.close_ex              # close command window
      @message_mini_window.refresh("Set this unit to wait?", 999999)
    when 60   # command state character
      open_command_window(@event, index)
      @skill_window.close_ex
      @item_window.close_ex
      @info_window.close
      @help_window.visible = false
    when 61   # state skill window
      open_skill_window(@event)             # ???????????
      @command_window.close_ex              # ?????????????
      @spriteset.clear_flash                # ?????????
    when 62   # item window status
      open_item_window                      # ????????????
      @command_window.close_ex              # ?????????????
      @spriteset.clear_flash                # ?????????
    when 63   # state unit status
      @info_window.refresh(@event)
      @command_window.active = false        # ?????????????????
    when 70   # check the state action
      @skill_window.close_ex                # ????????????
      @item_window.close_ex                 # ?????????????
      @help_window.visible = false          # ???????????????
      @spriteset.refresh_area               # ????????
      refresh_status_window_attack(@cursor_x, @cursor_y)  # ?????????????
      @message_mini_window.refresh("Confirm action?", 999999)
    end
  end
end


----------------------------------------update cursor ---------------------------------
#==============================================================================
# ¦ Scene_Srpg
#==============================================================================
class Scene_Srpg < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update_cursor
    if @last_cursor_x != @cursor_x or @last_cursor_y != @cursor_y
      @last_cursor_x, @last_cursor_y = @cursor_x, @cursor_y
      if $game_srpg.scene_state >= 2 and $game_srpg.scene_state <= 4
        check_effect_cell               # ???????
        @spriteset.refresh_effect_area  # ????????
      end
    end
    if Input.trigger?(Input::C)       # C????????
      update_cursor_decide
    elsif Input.trigger?(Input::B)    # B????????
      update_cursor_cancel
    elsif Input.trigger?(Input::X)    # X????????
      if $game_srpg.scene_state == 0    # ?????????????????
        Sound.play_decision
        change_scene_state(50)
      end
    elsif Input.trigger?(Input::L) or Input.trigger?(Input::R)  # LorR???
      i = Input.trigger?(Input::L) ? -1 : 1
      case $game_srpg.scene_state
      when 0
        Sound.play_cursor
        focus_unit_list(i)
      when 2
        Sound.play_cursor
        focus_attack_target(i)
      end
    elsif $TEST and Input.trigger?(Input::F5)    # F5????????
      text = sprintf("Upper %d : Middle %d : Lower %d",
             $game_srpg.data[@cursor_x, @cursor_y, 2],
             $game_srpg.data[@cursor_x, @cursor_y, 1],
             $game_srpg.data[@cursor_x, @cursor_y, 0])
      p text
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def update_cursor_decide
    case $game_srpg.scene_state
    when 0    # ??????
      event = $game_srpg.alive_unit_xy(@cursor_x, @cursor_y)
      if event != nil           # ??????????????????????
        Sound.play_decision
        @event = event
        if event.enemy_flag                 # ????????????????
          make_movable_cell                 # ???????
          @effect_cell.clear
          @spriteset.refresh_area           # ????????
        end
        change_scene_state(60)              # ????????????
      else                      # ???????????????????
        Sound.play_decision
        change_scene_state(50)              # ?????????????
      end
    when 1    # ????????
      if @movable_cell[[@cursor_x, @cursor_y]] != nil and
         @movable_cell[[@cursor_x, @cursor_y]] != ""
        Sound.play_decision
        make_move_route(@cursor_x, @cursor_y) # ??????????????
        @spriteset.clear_flash              # ?????????
        # ????????
        @event.unit.set_tile_effect($game_srpg.tile_effect(@cursor_x, @cursor_y))
        while(@event.move_route_forcing)    # ??????????
          Graphics.update                     # ????????
          Input.update                        # ???????
          $game_srpg.update                   # ??????
          @spriteset.update                   # ???????????
          @message_mini_window.update         # ??????????????
        end
        # ???????????????????
        for event in $game_srpg.events_xy(@cursor_x, @cursor_y)
          if event.trigger == 1 or event.trigger == 2
            event.start
            wait_for_event                  # ??????????????
            @event.action_end = true        # ???????????
          end
        end
        if not @event.action_end            # ????????????????
          change_scene_state(60, 1)
        elsif @event.move_end and @event.action_end
          change_scene_state(5)             # ?????????????????
        else
          change_scene_state(0)             # ?????????
        end
      else
        Sound.play_buzzer
      end
    when 2..4 # ???????
      if attack?(@cursor_x, @cursor_y)
        Sound.play_decision
        obj = @event.unit.action.obj
        if obj.is_a?(RPG::BaseItem) and obj.for_dead_friend?
          change_scene_state(54)            # ???????????
        else
          change_scene_state(70)            # ??????????????
        end
      else
        Sound.play_buzzer
      end
    when 5    # ???????
      if @attack_cell.include?([@cursor_x, @cursor_y])
        @spriteset.clear_flash              # ?????????
        Sound.play_decision
        @event.turn_cell(@cursor_x, @cursor_y)
        if auto_end? and $game_variables[TSRPG::GAME_RESULT] == 0
          change_scene_state(51)            # ????????????
        else
          change_scene_state(0)             # ?????????
        end
      else
        Sound.play_buzzer
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #--------------------------------------------------------------------------
  def update_cursor_cancel
    case $game_srpg.scene_state
    when 0    # ???????????????
      # ????????????????????????
      event = $game_srpg.alive_unit_xy(@cursor_x, @cursor_y)
      if event != nil
        if event.can_move_cancel?
          Sound.play_cancel
          event.undo_move
        else
          Sound.play_buzzer
        end
      else    # ?????????????????
        Sound.play_decision
        change_scene_state(50)
      end
    when 1    # ???????????
      Sound.play_cancel
      @event = nil
      change_scene_state(0)                 # ?????????
    when 2..4 # ???(????)??????????
      Sound.play_cancel
      focus_event(@event)
      @status_window.refresh(@event)
      # ???(????)??????????
      change_scene_state($game_srpg.scene_state == 4 ? 62 : 61)
    when 5    # ??????????????
      Sound.play_buzzer
    end
  end
end


-------------------------------------command window ---------------------------------------
#==============================================================================
# ¦ Scene_Srpg
#==============================================================================
class Scene_Srpg < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def create_window
    @help_window = Window_Help.new
    @help_window.visible = false
    @message_mini_window = Window_Message_Mini.new(0, 0)
    @status_window = Window_Status_Srpg.new(0, 264)
    @unit_window = Window_Unit.new(0, 0, 160, 24 * 6 + 32)
    @info_window = Window_Info.new(160, 0)
    @menu_window = Window_Command.new(160, ["End Turn", "Unit List", "Information"])
    @menu_window.openness = 0
    @menu_window.active = false
    @command_window = Window_Command.new(160, [Vocab::status])
    @command_window.openness = 0
    @command_window.active = false
    @skill_window = Window_Action.new($game_party.members[0])
    @skill_window.openness = 0
    @skill_window.active = false
    @skill_window.help_window = @help_window
    @item_window = Window_Item.new(0, 56, 256, 32 + 24 * 6)
    @item_window.set_column(1)
    @item_window.openness = 0
    @item_window.active = false
    @item_window.help_window = @help_window
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #--------------------------------------------------------------------------
  def open_menu_window(index = 0)
    @command_window.draw_item(3, !$game_system.save_disabled) # ??????
    @menu_window.index = index
    @menu_window.active = true
    @menu_window.open
    @message_mini_window.close    # ????????????????
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #update1.004
  #--------------------------------------------------------------------------
  def open_command_window(event, index = 0)
    @event = event
    last_openness = @command_window.openness
    @command_window.dispose
    if event.enemy_flag
      @command_window = Window_Command.new(160, [Vocab::status])
    else
      actor = event.unit      
        s1 = "Move"
        s2 = "Action"
        s3 = "Items"
        s4 = "Equip"
        s5 = "Wait"
        s6 = Vocab::status
        commands = [s1, s2, s3, s4, s5, s6]
        @command_window = Window_Command.new(160, commands)
        @command_window.draw_item(0, !(@event.move_end or @event.unit.move_end_for_state))
        @command_window.draw_item(1, !(@event.action_end or @event.unit.action_end_for_state))
        #only allow items if user is a trainer
        #if TSRPG::TRAINER_CLASS_IDS.include?(actor.class_id)
          @command_window.draw_item(2, !(@event.action_end or @event.unit.action_end_for_state))
        #else
          #@command_window.draw_item(2, false)
       # end
        @command_window.draw_item(3, !(@event.move_end or @event.action_end or @event.unit.move_end_for_state or @event.unit.action_end_for_state))
        @command_window.draw_item(4, !(@event.move_end and @event.action_end or @event.unit.action_end_for_state))
    end
    @command_window.index = index
    @command_window.openness = last_openness
    @command_window.open
    @message_mini_window.close    # ????????????????
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def open_skill_window(event)
    @skill_window.dispose
    @skill_window = Window_Action.new(event.unit)
    @skill_window.help_window = @help_window
    @help_window.visible = true
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def open_item_window
      @item_window.refresh
      @item_window.open
      @item_window.active = true
      @help_window.visible = true
  end
  #--------------------------------------------------------------------------
  # ? ????????????????
  #--------------------------------------------------------------------------
  def update_menu_window
    if Input.trigger?(Input::C)     # C????????
      case @menu_window.index
      when 0..2 # ????? / ?????? / ??
        Sound.play_decision
        change_scene_state(51 + @menu_window.index) # ??????????
      when 3    # ???
        if $game_system.save_disabled
          Sound.play_buzzer
        else
          Sound.play_decision
          change_scene_state(0)       # ?????????
          $scene = Scene_File.new(true, false, false, true)
        end
	  when 4
	      Sound.play_decision
        change_scene_state(62)                     # ????????????
	end

    elsif Input.trigger?(Input::B)  # B????????
      Sound.play_cancel
      change_scene_state(0)           # ?????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #update1.004
  #--------------------------------------------------------------------------
  def update_command_window
    if Input.trigger?(Input::C)   # C????????
      # ????????
      if @command_window.commands[@command_window.index] == Vocab::status
        Sound.play_decision
        change_scene_state(63)
      # ?????
      elsif @command_window.index == 0 and not (@event.move_end or @event.unit.move_end_for_state)
        Sound.play_decision
        change_scene_state(1)       # ???????????
      # ?????
      elsif @command_window.index == 1 and not (@event.action_end or @event.unit.action_end_for_state)
        Sound.play_decision
        change_scene_state(61)      # ?????????????
      # ???????
      elsif @command_window.index == 2 and not (@event.action_end or @event.unit.action_end_for_state)
        actor = @event.unit   
        #if TSRPG::TRAINER_CLASS_IDS.include?(actor.class_id)
          Sound.play_decision
          change_scene_state(62)      # ??????????????
       # else
       #   Sound.play_buzzer
       # end
      # ???????
      elsif @command_window.index == 3 and not (@event.move_end or @event.action_end or
          @event.unit.move_end_for_state or @event.unit.action_end_for_state)
        Sound.play_decision
        change_scene_state(0)       # ?????????
        for i in 0...$game_party.members.size
          if $game_party.members[i].id == @event.unit.id
            $game_temp.in_srpg_equip = true
            $scene = Scene_Equip.new(i)
            break
          end
        end
      # ?????
      elsif @command_window.index == 4 and not (@event.move_end and @event.action_end or @event.unit.action_end_for_state)
        Sound.play_decision
        focus_event(@event)
        change_scene_state(55)      # ??????????????
      else
        Sound.play_buzzer
      end
    elsif Input.trigger?(Input::B)  # B????????
      Sound.play_cancel
      change_scene_state(0)             # ?????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #--------------------------------------------------------------------------
  def update_skill_window
    if Input.trigger?(Input::C)   # C????????
      skill = @skill_window.skill
      if not @event.unit.skill_can_use?(skill)
        Sound.play_buzzer
      elsif skill.id == 1           # ??
        Sound.play_decision
        @event.unit.action.set_attack
        if @event.unit.atk_range == 0 # ??0???????????
          check_attack_cell             # ?????????
          check_effect_cell             # ???????
          change_scene_state(70)        # ??????????????
        else
          change_scene_state(2)         # ????????????????
        end
      else                          # ??? / ?? / ??
        Sound.play_decision
        @event.unit.action.set_skill(skill.id)
        if skill.atk_range == 0       # ??0???????????
          check_attack_cell             # ?????????
          check_effect_cell             # ???????
          change_scene_state(70)        # ??????????????
        else
          change_scene_state(3)         # ?????????????????
        end
      end
    elsif Input.trigger?(Input::B)  # B????????
      Sound.play_cancel
      change_scene_state(60)        # ?????????????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def update_item_window
    if Input.trigger?(Input::C)     # C????????
      if not $game_party.item_can_use?(@item_window.item)
        Sound.play_buzzer
      else
        Sound.play_decision
        @event.unit.action.set_item(@item_window.item.id)
        change_scene_state(4)         # ??????????????????
      end
    elsif Input.trigger?(Input::B)  # B????????
      Sound.play_cancel
      change_scene_state(60)        # ?????????????????
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #update1.006
  #--------------------------------------------------------------------------
  def update_unit_window
    unless $game_srpg.scene_state == 54   # ???????????
      if @unit_window.last_index != @unit_window.index
        focus_event(@unit_window.item) unless @unit_window.item.unit.dead?
        @status_window.refresh(@unit_window.item)
        @unit_window.last_index = @unit_window.index
      end
    end
    if Input.trigger?(Input::C)   # C????????
      if @unit_window.item != nil
        if $game_srpg.scene_state == 52     # ???????????
          unless @unit_window.item.unit.dead?
            Sound.play_decision
            focus_event(@unit_window.item)
            change_scene_state(0)             # ?????????
          else
            Sound.play_buzzer
          end
        elsif $game_srpg.scene_state == 54  # ???????????
          unless @unit_window.item.unit.dead?
            Sound.play_buzzer
          else
            Sound.play_decision
            for event in $game_srpg.unit_list
              if event.pos?(@cursor_x, @cursor_y) and event.unit.dead?
                event.moveto(@event.x, @event.y)
              end
            end
            @unit_window.item.moveto(@cursor_x, @cursor_y)  # ????
            @unit_window.item.set_last_pos    # ?????????
            @unit_window.close_ex
            @message_mini_window.refresh("Confirm action?", 999999)
            refresh_status_window_attack(@cursor_x, @cursor_y)  # ?????????????
            $game_srpg.scene_state = 70       # ?????????
          end
        end
      end
    elsif Input.trigger?(Input::B)  # B????????
      Sound.play_cancel
      if $game_srpg.scene_state == 54       # ???????????
        @unit_window.close_ex
        $game_srpg.scene_state = 3            # ??????????
      else                                  # ???????????
        $game_cursor.set_auto_move(@last_focus_x, @last_focus_y)
        change_scene_state(50, 1)             # ?????????????
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def update_info_window
    if Input.trigger?(Input::C)
      Sound.play_decision
      if $game_srpg.scene_state == 53   # ???????
        change_scene_state(50, 2)
      else                              # ????????????
        change_scene_state(60, @event.enemy_flag ? 0 : 5)
      end
    elsif Input.trigger?(Input::B)   # ?????????
      Sound.play_cancel
      if $game_srpg.scene_state == 53   # ???????
        change_scene_state(50, 2)
      else                              # ????????????
        change_scene_state(60, @event.enemy_flag ? 0 : 5)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ???????????????
  #update1.004
  #--------------------------------------------------------------------------
  def update_message_mini_window
    if Input.trigger?(Input::C)       # C????????
      case $game_srpg.scene_state
      when 51   # ??????????
        Sound.play_decision
        @menu_window.close_ex
        @message_mini_window.close
        $game_srpg.change_turn                # ???????
      when 55   # ???????
        Sound.play_decision
        @event.move_end   = true
        @event.action_end = true
        change_scene_state(5)                 # ?????????
      when 70   # ??????????
        @spriteset.clear_flash                # ?????????
        Sound.play_decision
        execute_action(@cursor_x, @cursor_y)  # ?????
        if TSRPG::USE_AUTO_MOVE and not (@event.move_end or @event.unit.move_end_for_state) and not
           @event.unit.dead?
          change_scene_state(1)               # ????????????????
        elsif (@event.move_end or @event.unit.move_end_for_state) and @event.action_end and not @event.unit.dead?
          change_scene_state(5)               # ?????????????????
        else
          change_scene_state(0)               # ?????????
        end
      end
    elsif Input.trigger?(Input::B)    # B????????
      case $game_srpg.scene_state
      when 51   # ??????????
        Sound.play_cancel
        change_scene_state(50)              # ?????????????
      when 55   # ???????
        Sound.play_cancel
        change_scene_state(60)              # ????????????
      when 70   # ??????????
        Sound.play_cancel
        @message_mini_window.close
        @status_window.refresh($game_srpg.alive_unit_xy(@cursor_x, @cursor_y))  # ??????????????
        if @event.unit.action.attack?       # ???????
          $game_srpg.scene_state = 2          # ???????????
        elsif @event.unit.action.skill?     # ??????
          if @event.unit.action.skill.atk_range == 0  # ??0?????????
            change_scene_state(61)            # ?????????????
          else
            $game_srpg.scene_state = 3        # ??????????
          end
        elsif @event.unit.action.item?      # ???????
          $game_srpg.scene_state = 4          # ???????????
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????????(???)
  #--------------------------------------------------------------------------
  def refresh_status_window_attack(x, y)
    event = $game_srpg.alive_unit_xy(x, y, $game_srpg.scene_state != 54)
    obj = @event.unit.action.obj
    if event != nil   # ?????????????
      if event.in_scope?
        @status_window.refresh(@event, event)
        return
      end
    end
    # ??????????????
    for pos in @effect_cell
      event = $game_srpg.alive_unit_xy(x + pos[0], y + pos[1])
      next if event == nil
      next unless event.in_scope?
      @status_window.refresh(@event, event)
      break
    end
  end
end


-----------------------------------------update turn enemy --------------------------
#==============================================================================
# ¦ Scene_Srpg
#==============================================================================
class Scene_Srpg < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????
  #update1.004
  #update1.008
  #update1.009
  #--------------------------------------------------------------------------
  def update_turn_enemy
    for event in $game_srpg.alive_enemy_list + $game_srpg.confuse_actor_list
      @event = event
      unless @event.action_end or @event.move_end         # ????????
#~       unless (@event.action_end or @event.unit.action_end_for_state(false)) or
#~           (@event.move_end or @event.unit.move_end_for_state(false)) # ????????
        focus_event(@event)
        @status_window.refresh(@event)
        wait(20)
        @event.unit.make_action             # ?????
        @event.unit.action.set_attack if @event.unit.berserker? # ?????
        @event.action_end = true if @event.unit.action_end_for_state(false)
        @event.move_end = true if @event.unit.move_end_for_state(false)
      end
      # ????????????????
      unless @event.move_end or @event.unit.move_end_for_state(false)
        $game_srpg.scene_state = 101
        if @event.move_target != nil ? update_enemy_move_target : update_enemy_move
          @event.move_end = true
          Graphics.frame_reset  # ??????????
          return
        else
          @event.move_end = true if @event.action_end
        end
      end
      # ????
      unless @event.action_end or @event.unit.action_end_for_state(false)
        $game_srpg.scene_state = 102
        if @event.unit.action.nothing?    # ???????
          @event.action_end = true
          return
        end
        if update_enemy_action
          @event.action_end = true
          Graphics.frame_reset  # ??????????
          return
        end
        @event.action_end = true
        return
      end
      return unless (@event.action_end or @event.unit.action_end_for_state(false)) and
        (@event.move_end or @event.unit.move_end_for_state(false))
      if @event.action_rest > 0   # ????????
        @event.action_rest -= 1
        if @event.action_rest > 0
          @event.action_end = false
          @event.move_end = false
          return
        end
      end
    end
    $game_srpg.change_turn   # ????????
    $game_temp.refresh_status_window = $game_srpg.unit_list[@unit_list_index]
  end
  #--------------------------------------------------------------------------
  # ? ????
  #update1.005
  #update1.007
  #--------------------------------------------------------------------------
  def update_enemy_move
    check_effect_cell                 # ???????
    # ????????????????????????(NPC????)
    target = @event.get_near_enemy(@event.unit.action.for_friend?)
    return true if target.empty?                   # ??????????
    # ?????????????????????????????????
    unless (@event.action_end or @event.unit.action_end_for_state(false))
      range, hole = @event.unit.action.get_range
      d = @event.get_distance(target[0])    # ?????????
      return false if d <= range and d > hole
    end
    make_movable_cell                         # ?????????
    # ????
    if @event.unit.hp * 100 / @event.unit.maxhp <= @event.away_hp
      # ?????????????????
      d = 1024
      for event in target
        d2 = @event.get_distance(event)
        d, enemy = d2, event if d2 < d
      end
      # ???????????????????????????
      scope_dist = enemy.get_distance(@event)
      for pos in @movable_cell.keys
        if @movable_cell[pos] != ""
          d = enemy.get_distance_cell(pos[0], pos[1])
          if d > scope_dist
            scope_dist = d
            x, y = pos[0], pos[1]
          end
        end
      end
    # ????
    else
      # ????????????????????????
      range, hole = @event.unit.action.get_range
      for event in target
        next if @event.get_distance(event) > range + @event.unit.move_power
        for pos in @movable_cell.keys
          d = event.get_distance_cell(pos[0], pos[1])
          if @movable_cell[pos] != "" and d <= range and d > hole
            x, y = pos[0], pos[1]
            break
          end
        end
        break if x != nil
      end
      if x == nil
        # ????????????????????????
        scope_dist = target[0].get_distance(@event)
        for pos in @movable_cell.keys
          next if @movable_cell[pos] == ""  # ?????????
          d = target[0].get_distance_cell(pos[0], pos[1])
          if d < scope_dist
            scope_dist = d
            x, y = pos[0], pos[1]
          end
        end
      end
    end
    update_enemy_move_route(x, y) if x != nil # ??????????
    while(@event.move_route_forcing)    # ??????????
      wait(1)
    end
    @event.turn_enemy if (@event.action_end or @event.unit.action_end_for_state(false)) and not
      (@event.unit.confusion? or @event.unit.berserker?)
    return true
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def update_enemy_move_target
    check_effect_cell                 # ???????
    # ????????????
    return true if @event.x == @event.move_target[0] and @event.y == @event.move_target[1]
    make_movable_cell       # ?????????
    # ????????????????????????
    dist = 1024
    for pos in @movable_cell.keys
      next if @movable_cell[pos] == ""  # ?????????
      d = (pos[0] - @event.move_target[0]).abs + (pos[1] - @event.move_target[1]).abs
      if d < dist
        dist = d
        x, y = pos[0], pos[1]
      end
    end
    update_enemy_move_route(x, y) if x != nil # ??????????
    while(@event.move_route_forcing)    # ??????????
      wait(1)
    end
    return true
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def update_enemy_move_route(x, y)
    make_move_route(x, y)
    $game_cursor.set_auto_move(x, y)
    @spriteset.refresh_area     # ????????
    wait(20)
    @spriteset.clear_flash      # ?????????
    # ????????
    @event.unit.set_tile_effect($game_srpg.tile_effect(x, y))
  end
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def update_enemy_action
    check_attack_cell                 # ??????????
    check_effect_cell                 # ???????
    # ????????????????????????
    max = 0
    maxhp = 99999
    for pos in @attack_cell
      n = 0
      hp = 99999
      for pos2 in @effect_cell
        enemy = $game_srpg.alive_unit_xy(pos[0] + pos2[0], pos[1] + pos2[1])
        next if enemy == nil                    # ????????????
        # ??????????
        if @event.unit.action.for_friend?
          next if @event.opponent?(enemy)
          # ???????????????????
          if @event.unit.action.skill?
            skill = @event.unit.action.skill
            next if skill.for_dead_friend? != enemy.unit.dead?
            enemy.unit.make_obj_damage_value(@event.unit, skill)
            result = false
            result = true if skill.id == 3  # ???????????
            result = true if enemy.unit.hp_damage < 0 and
                             enemy.unit.hp < enemy.unit.maxhp
            result = true if enemy.unit.mp_damage < 0 and
                             enemy.unit.mp < enemy.unit.maxmp
            for id in skill.plus_state_set
              result = true unless enemy.unit.state?(id)
            end
            for id in skill.minus_state_set
              result = true if enemy.unit.state?(id)
            end
            next unless result
          end
        # ?????????
        else
          next unless @event.opponent?(enemy)
        end
        n += 1
        hp = enemy.unit.hp if enemy.unit.hp < hp
      end
      if n > max or (n == max and hp < maxhp)
        x, y = pos[0], pos[1]
        max = n
        maxhp = hp
      end
    end
    return false if max == 0
    $game_cursor.set_auto_move(x, y)
    enemy = $game_srpg.alive_unit_xy(x, y)
    @status_window.refresh(enemy) if enemy != nil
    unless Input.press?(Input::Z) # Z????????????????
      @spriteset.refresh_area   # ????????
      wait(20)
      refresh_status_window_attack(x, y)  # ?????????????
      wait(40)
    end
    @spriteset.clear_flash      # ?????????
    execute_action(x, y)        # ?????
    @event.turn_enemy if @event.move_end and not @event.unit.confusion?
    return true
  end
end
  
  
-------------------------------------Settings-----------------------------------
#==============================================================================
# ¦ ????
#==============================================================================
module TSRPG
  # Constants (do not change this!)
  ATK = 1
  DEF = 2
  SPI = 3
  AGI = 4
  HIT = 5
  EVA = 6
  CRI = 7
  CNT = 8
  COP = 9
  HPR = 10
  MPR = 11

  # assign weapon elements into this array
  WEAPON_ELEMENT = []
  
  # assign variable id to store Rule Flag
  RULE_FLAG   = 1
  # assign variable id to store Rule Option
  RULE_OPTION = 2

  # SRPG variables for conditional branches
  TURN_COUNT          = 3   # turn count
  GAME_RESULT         = 4   # game result
  CHANGE_TURN         = 5   # change turn
  ATTACKER_EVENT_ID   = 6   # attacker event id
  ATTACKER_BATTLER_ID = 7   # attacker battler id
  TARGET_EVENT_ID     = 8   # target event id
  TARGET_BATTLER_ID   = 9   # target battler id
  ACTOR_NUM           = 10  # remaing alive actors
  ENEMY_NUM           = 11  # remaing alive enemies
  TARGETED_ENEMY_HP   = 25  # HP of (first) targeted enemy
  TARGETED_EN_MAX_HP  = 26  # max HP of (first) targeted enemy
  RANDOM_NUMBER       = 27  # random number between 1 and var 26
  TARGETED_EN_NAME    = 28  # target enemy's name
  TARGETED_EN_OWNED   = 29  # determine if targeted enemy is owned
  ASSOCIATED_ALLY     = 30  # get associated ally id of enemy
  DISPOSABLE_VAR      = 31  # can be overridden at will
  
  TRAINER_CLASS_IDS = [13,14] #class ids of trainers (trainers are allowed to use items)
  
  # reflect aniamtion id
  ANIME_REFLECT = 81        

  # toggle auto move
  # true : enable
  # false : disable
  USE_AUTO_MOVE = true

  # frames for popup to appear
  ACTION_AFTER_WAIT = 20

  # n% exp received for every action
  ACTION_EXP_RATE = 10
    
  # allow NPCs to fight each other
  NPC_BATTLE = true
    
  # back attack is when attacker is attacking from behind/side the target
  BACK_ATTACK_BONUS      = 20   # increase damage by n% during back attack
  BACK_ATTACK_BONUS_HIT  = 100  # hit rate when during back attack

  # tile_effect_pattern[id] = [flag, value, rate]
  # true = increase, false = decrease
  #
  # flags
  # ATK=attack, DEF=defense, SPI=spirit, AGI=agility, HIT=hit, EVA=eva,
  # CRI=crit, CNT=counter, COP=assist, HPR=hprecover
  # MPR=mprecover, 101 ~ autostate (100+ state ID)
  TILE_EFFECT_PATTERN = {}
  TILE_EFFECT_PATTERN[0] = [0, 0, false]
  TILE_EFFECT_PATTERN[1] = [HPR, -20, true] # deals 20% damage per turn
  TILE_EFFECT_PATTERN[2] = [129, 0, false] # adds state 29 (zombie)
  TILE_EFFECT_PATTERN[3] = [AGI, -1, false] # reduce move by 1
  
  # tile_effect[tile ID] = ["terrain name", tile_effect pattern [id1,id2,...]]
  # press F5 during debug to get tile ID, upper value
  # multiple effects is possible
  TILE_EFFECT = {}
  TILE_EFFECT[0]    = ["No effect", [0]]
  TILE_EFFECT[674]  = ["Marsh HP-20%", [1]]
  TILE_EFFECT[673]  = ["Zombie Dark Swamp", [2, 3]]
    
  # configure color of popup
  COLOR_ACTOR_HP_DAMAGE = Color.new(255, 0, 0)        # red
  COLOR_ENEMY_HP_DAMAGE = Color.new(255, 255, 255)    # white
  COLOR_ACTOR_MP_DAMAGE = Color.new(255, 0, 128)      # pink
  COLOR_ENEMY_MP_DAMAGE = Color.new(255, 255, 255)    # white
  COLOR_HP_GAIN         = Color.new(0, 255, 0)        # green
  COLOR_MP_GAIN         = Color.new(0, 255, 128)      # lime green
  COLOR_ADD_STATE       = Color.new(255, 0, 0)        # red
  COLOR_REMOVE_STATE    = Color.new(0, 255, 255)      # cyan
  COLOR_CRITICAL        = Color.new(255, 255, 0)      # yellow
  COLOR_BACK_ATTACK     = Color.new(255, 192, 0)      # orange
    
  # job parameters
  JOB_AGI           = [nil, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3]           # move
  JOB_COUNTER_POWER = [nil, 100, 80, 80, 80, 80, 80, 80, 80, 0, 0]  # counter
  JOB_COOP_POWER    = [nil, 100, 80, 80, 80, 80, 80, 80, 80, 0, 0]  # assist
  JOB_AUTO_STATE = {}   # auto state for every job
  # job_auto_state[actor id] = [state id1, state_di2,..]
  JOB_AUTO_STATE[1] = []
  JOB_AUTO_STATE[2] = [31]
  JOB_AUTO_STATE[3] = []
  JOB_AUTO_STATE[4] = []
  JOB_AUTO_STATE[5] = []
  JOB_AUTO_STATE[6] = []
  JOB_AUTO_STATE[7] = []
  JOB_AUTO_STATE[8] = []
  JOB_AUTO_STATE[9] = []
  JOB_AUTO_STATE[16] = [22]
   
  # display boss HP as ???? depending on HP
  BOSS_HP_TYPE = {}
  #BOSS_HP_TYPE[monster ID] = n
  # n=0 :normal display, n<0 : always ????, n>0 until n HP remaining
  BOSS_HP_TYPE[3]  = -1     # HP of monster ID = 3 always displayed as ????
  BOSS_HP_TYPE[5]  = 100    # HP of mosnter ID = 5 displayed as ???? until HP is 100 below
  
  # force actor to be used on certain maps
  MAP_ACTOR = {}
  # MAP_ACTOR[map id] = [actor id1, actor id2,..]
  MAP_ACTOR[3] = [1]  # actor 1 must be used in map ID 3
  #MAP_ACTOR[5] = [1,2]  # actor 1 must be used in map ID 3
  #MAP_ACTOR[7] = [1,2]  # actor 1 must be used in map ID 3
  #MAP_ACTOR[9] = [1,2]
  #MAP_ACTOR[12] = [5,16,17]
  #MAP_ACTOR[14] = [5,16,17]
  #MAP_ACTOR[16] = [1,2]
  #MAP_ACTOR[17] = [1,2]
  #MAP_ACTOR[18] = [1,2]
  #MAP_ACTOR[19] = [1,2]
  #MAP_ACTOR[21] = [1,2]
  #MAP_ACTOR[23] = [1,2]
  #MAP_ACTOR[29] = [1,2]
  #MAP_ACTOR[33] = [1,2]
  #MAP_ACTOR[36] = [1,2]
  #MAP_ACTOR[40] = [1,2]
  #MAP_ACTOR[46] = [1,2]
  
  # prevent actors from being used on certain maps
  BANNED_ACTOR = {}
  BANNED_ACTOR[26] = [1,2]
  BANNED_ACTOR[48] = [1,2]
  
  # set minimum number of characters that participate
  PARTY_MINIMUM = 1
  
  # the following maps have no minimum character restriction
  MIN_EXCEPTION = [2,39,76]

  # set up custom range here
  # always start at value 101
  # applicable for tag <range_type=n>
  CUSTOM_RANGE = {}
  CUSTOM_RANGE[101] = [# adjacent cells
    [0, -1], [0, 1], [-1, 0], [1, 0]
  ]
  CUSTOM_RANGE[102] = [# adjacent cells
    [0, -1], [0, 1], [-1, 0], [1, 0], [2, 0], [2, 1], [2, -1]
  ]
  
  #evolution chart. ex bulbasaur has actor id 5 and evolves into actor id 31, ivysaur
  EVO_CHART = {}
  EVO_CHART[5] = 31
  EVO_CHART[31] = 32
  EVO_CHART[12] = 37
  EVO_CHART[14] = 39
  EVO_CHART[16] = 33
  EVO_CHART[33] = 34
  EVO_CHART[17] = 35
  EVO_CHART[35] = 36
  EVO_CHART[19] = 40
  EVO_CHART[40] = 41
  EVO_CHART[20] = 42
  EVO_CHART[21] = 39
  EVO_CHART[23] = 45
  EVO_CHART[24] = 47
  EVO_CHART[26] = 49
  EVO_CHART[27] = 50
  EVO_CHART[29] = 52
  EVO_CHART[30] = 51
  EVO_CHART[53] = 54
  EVO_CHART[55] = 56
  EVO_CHART[57] = 58
  EVO_CHART[58] = 59
  EVO_CHART[60] = 61
  EVO_CHART[62] = 63
  EVO_CHART[63] = 64
  EVO_CHART[65] = 66
  EVO_CHART[67] = 68
  EVO_CHART[69] = 70
  EVO_CHART[71] = 72
  EVO_CHART[73] = 74
  EVO_CHART[22] = 124
  EVO_CHART[128] = 129
  EVO_CHART[129] = 130
end

module Vocab
  def self.hit            # ???????????
    return "Hit"
  end
  def self.eva            # ???????????
    return "Eva"
  end
  def self.cri            # ??????????????
    return "Cri"
  end
  def self.cri_action     # ????????????????
    return "Critical!"
  end
  def self.back_attack    # ?????????????????
    return "Back attack!"
  end
  def self.counter        # ???????????
    return "Counter"
  end
  def self.counter_action # ?????????????
    return "Counter!"
  end
  def self.coop           # ???????????
    return "Assist"
  end
  def self.coop_action    # ?????????????
    return "Assist!"
  end
end

module Sound
  def self.play_step      # ??
    Audio.se_play("Audio/SE/Jump1.ogg", 80, 150)  # sound played when characters move
  end
end

#==============================================================================
# ¦ Tags
#------------------------------------------------------------------------------
#update1.008
#update1.009  # added tag <no back>
#update1.011  # added tag <double anime=n>, <submarine>, <atk_ele=n>
#==============================================================================
module TSRPG
  module Pattern
    MOVE_POWER    = /<move=(\-*\d+)>/i            # ??????
    COUNTER_POWER = /<counter=(\-*\d+)>/i            # ??????
    COOP_POWER    = /<assist=(\-*\d+)>/i            # ??????
    ATK_RANGE     = /<range=(\d+)>/i               # ????
    ATK_RANGE_TYPE = /<range_type=(\d+)>/i        # ???????
    ATK_HOLE      = /<hole=(\-*\d+)>/i              # ?
    ATK_SIZE      = /<size=(\d+)>/i               # ????
    ATK_SIZE_TYPE = /<size_type=(\d+)>/i         # ???????
    ATK_TILE      = /<atk_tile>/                # ??????????????
    ATK_ANIMATION = /<atk_anime=(\d+)>/i         # ???????????
    ATK_MP_COST   = /<mpcost=(\d+)>/i             # ???????MP
    ACTION_MAX    = /<action=(\d+)>/            # ??????
    NOSCOPE       = /<noscope>/                    # ??????
    NOSELF        = /<noself>/                  # ???????
    KNOCK_BACK    = /<push=(\d+)>/i           # ????????
    NOMOVE        = /<nomove>/                  # ???????
    WEAPON_SKILL  = /<weapon_skill>/                  # ???????
    STEAL_RATE    = /<steal=(\d+)>/                # ?????
    PIERCE        = /<pierce>/                      # ??
    DONMOVE       = /<donmove>/                  # ????
    DONACT        = /<donact>/                  # ????
    DONBACK       = /<donact>/                # ?????
    GUTS          = /<guts>/                    # ???
    REFLECT       = /<reflect>/                      # ????
    CHANGE_DAMAGE = /<change_damage>/              # ????MP??
    DONEVADE      = /<donevade>/                      # ??
    ZOMBIE        = /<zombie>/                    # ???
    TEMP_SKILL    = /<skill=(\d+(?:,\d+)*)>/i # ?????
    FLOAT         = /<float>/                      # ????
    SPIDER        = /<spider>/                  # ????
    SCOPE         = /<scope\s*\=\s*(\d+)\s*>/i     # ????
    AWAY          = /<away\s*\=\s*(\d+)\s*>/i     # ????HP
    FACE          = /<face=(\S+?),(\d+)>/i          # ???????
    CLASS         = /<class=(\S+?)>/             # ??????
    LV            = /<level=(\d+)>/              # ??????
    EQUIP         = /<equip=(\d+),(\d+),(\d+),(\d+),(\d+)>/ # ?????
    OWNED         = /<owned>/ 
    ASSOCIATED_ALLY = /<actor_id=(\d+)>/ 
    REGEN          = /<regen>/
    HITALL          = /<hitall>/
    MOVE_SELF      = /<moveself>/
    TELEPORT      = /<teleport>/

    PLAYER        = /<pl=(\d+)\s*>/i              # ????????
    ENEMY         = /<en=(\d+)\s*>/i              # ???????
    BOSS          = /<boss>/i                     # ????
    GUARD         = /<guard>/i                    # ????
    NPC           = /<npc>/i                      # NPC???
    PNPC          = /<pnpc>/i                     # PNPC???
    
    NOT_BACK_ATTACK = /<noback>/                # ?????????
    
    SUBMARINE     = /<submarine>/                  # ????
    DOUBLE_ANIME  = /<double_anime=(\d+)>/        # ??????
    ATK_ELEMENT   = /<atk_ele\s*=\s*(\d+(?:,\d+)*)>/ # ????
  end
end


---------------------------------Commands------------------------------------------
module TSRPG
module Commands
  module_function
  #--------------------------------------------------------------------------
  # ? SRPG????????????????
  #--------------------------------------------------------------------------
  def srpg_end
    $game_temp.srpg_end = true
  end
  #--------------------------------------------------------------------------
  # ? ?????????ID????????
  #--------------------------------------------------------------------------
  def focus_event(id)
    event = $game_srpg.events[id]
    $scene.focus_event(event) if event != nil
  end
  
  def play_animation(target_id,animation_id)
    event = $game_srpg.events[target_id]
    event.animation_id=animation_id if event != nil
  end

  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def focus_xy(x, y)
    $game_cursor.set_auto_move(x, y)
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????????
  #--------------------------------------------------------------------------
  def focus_actor
    $scene.focus_actor
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????????
  #--------------------------------------------------------------------------
  def focus_enemy
    $scene.focus_enemy
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def delete_event(id)
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.hp = 0
    event.damage
  end
  
  def heal_event(id, amount)
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.hp = event.unit.hp+amount
    event.damage
  end
  
  def heal_event_mp(id, amount)
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.mp = event.unit.mp+amount
    event.damage
  end
  
  def recoil(id, amount) #amount in percentage
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.hp = (event.unit.hp * amount).to_i
    event.damage
  end
  
  def recover(id, amount) #amount in percentage
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.hp = event.unit.hp + (event.unit.maxhp * amount).to_i
    event.damage
  end
  
  def endeavor(user_id, target_id)
    target = $game_srpg.events[target_id]
    user = $game_srpg.events[user_id]
    return if target== nil
    return if user == nil
    if user.unit.hp < target.unit.hp
      target.unit.hp = user.unit.hp
      target.damage
    end
  end
  
  def seismic(user_id, target_id) #for seismic toss/night shade skills
    event = $game_srpg.events[target_id]
    event2 = $game_srpg.events[user_id]
    return if event == nil
    return if event2 == nil
    event.unit.hp = event.unit.hp - (event2.unit.level * 5)
    event.damage
  end
  
  def add_status_chance(id, state_id, chance) #chance out of 100
    x = rand(100)
    if chance > x
      add_status(id, state_id)
    end
  end
  
  def add_status(id, state_id) #event id, state id
    event = $game_srpg.events[id]
    return if event == nil
    event.unit.add_state(state_id)
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def set_actor(event_id, actor_id)
    $game_party.add_actor(actor_id)
    $game_system.srpg_member.push($game_party.members.size - 1)    
    $game_srpg.add_actor(event_id, $game_system.srpg_member.size - 1 )
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def set_enemy(event_id, enemy_id)
    $game_srpg.add_enemy(event_id, enemy_id)
  end
  
  def is_owned(enemy_id)
    event = $game_srpg.events[enemy_id]
    id = event.unit.enemy_id
    note = $data_enemies[id].note	
    result = note =~ TSRPG::Pattern::OWNED ? 1 : 0    
    return result
	end
  
  def ally_id(enemy_id)
    id = 0-get_unit_id(enemy_id)
    note = $data_enemies[id].note	
    result   = note =~ TSRPG::Pattern::ASSOCIATED_ALLY ? $1.to_i : 0
    return result
  end
  #--------------------------------------------------------------------------
  # ? ?????NPC???
  #--------------------------------------------------------------------------
  def set_npc(id, enemy_id)
    set_enemy(id, enemy_id)
    $game_srpg.events[id].npc = true
  end
  #--------------------------------------------------------------------------
  # ? ?????PNPC???
  #--------------------------------------------------------------------------
  def set_pnpc(id, enemy_id)
    set_enemy(id, enemy_id)
    $game_srpg.events[id].pnpc = true
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def set_home(id, x = -1, y = -1)
    event = $game_srpg.events[id]
    if event != nil
      if x < 0 or y < 0
        event.move_target = nil
      else
        event.move_target = [x, y]
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def set_scope(id, dist)
    event = $game_srpg.events[id]
    event.scope_dist = dist if event != nil
  end
  #--------------------------------------------------------------------------
  # ? ????????HP?????
  #--------------------------------------------------------------------------
  def get_hp(id)
    event = $game_srpg.events[id]
    return event.unit.hp if event != nil
  end
  
  def get_random
    return rand($game_variables[TSRPG::TARGETED_EN_MAX_HP])
  end  
  
  def get_name(id)
    event = $game_srpg.events[id]
    return event.unit.name
  end

  def is_enemy(id)
    event = $game_srpg.events[id]
    return event.enemy_flag if event != nil
    return false
  end
  #--------------------------------------------------------------------------
  # ? ?????????ID(????ID)???????????
  #update1.002
  #--------------------------------------------------------------------------
  def get_unit_id(event_id, var_id = 0)
    event = $game_srpg.events[event_id]
    if event == nil
      result = 0
    elsif event.unit.actor?
      result = event.unit.id
    else
      result = 0 - event.unit.enemy_id
    end
    $game_variables[var_id] = result if var_id > 0
    return result
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????????????
  #--------------------------------------------------------------------------
  def save_pos(id)
    event = $game_srpg.events[id]
    event.set_last_pos if event != nil
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????????
  #--------------------------------------------------------------------------
  def reset_selfswitch
    for event in $game_srpg.events.values
      $game_self_switches[[$game_srpg.map_id, event.id, "A"]] = false
      $game_self_switches[[$game_srpg.map_id, event.id, "B"]] = false
      $game_self_switches[[$game_srpg.map_id, event.id, "C"]] = false
      $game_self_switches[[$game_srpg.map_id, event.id, "D"]] = false
    end
    $game_srpg.need_refresh = true
  end
  #--------------------------------------------------------------------------
  # ? SRPG??????????
  #--------------------------------------------------------------------------
  def move_player(map_id, x, y, direction)
    $game_player.set_direction(direction)
    if $game_map.map_id != map_id
      $game_map.setup(map_id)
    end
    $game_player.moveto(x, y)
  end
end

module Accessor
  module_function
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def move_power
    if @move_power == nil
      @move_power = @note =~ TSRPG::Pattern::MOVE_POWER ? $1.to_i : 0
    end
    return @move_power
  end
  public :move_power
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def counter_power
    if @counter_power == nil
      @counter_power = @note =~ TSRPG::Pattern::COUNTER_POWER ? $1.to_i : 0
    end
    return @counter_power
  end
  public :counter_power
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def coop_power
    if @coop_power == nil
      @coop_power = @note =~ TSRPG::Pattern::COOP_POWER ? $1.to_i : 0
    end
    return @coop_power
  end
  public :coop_power
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def atk_range
    if @atk_range == nil
      @atk_range = @note =~ TSRPG::Pattern::ATK_RANGE ? $1.to_i : 1
    end
    return @atk_range
  end
  public :atk_range
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def atk_range_type
    if @atk_range_type == nil
      @atk_range_type = @note =~ TSRPG::Pattern::ATK_RANGE_TYPE ? $1.to_i : 0
    end
    return @atk_range_type
  end
  public :atk_range_type
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def atk_hole
    if @atk_hole == nil
      @atk_hole = @note =~ TSRPG::Pattern::ATK_HOLE ? $1.to_i : 0
    end
    return @atk_hole
  end
  public :atk_hole
  
  def hitall?
    if @hitall == nil
      @hitall = @note =~ TSRPG::Pattern::HITALL ? true : false
    end
    return @hitall
  end
  public :hitall?
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def atk_size
    if @atk_size == nil
      @atk_size = @note =~ TSRPG::Pattern::ATK_SIZE ? $1.to_i : 0
    end
    return @atk_size
  end
  public :atk_size
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def atk_size_type
    if @atk_size_type == nil
      @atk_size_type = @note =~ TSRPG::Pattern::ATK_SIZE_TYPE ? $1.to_i : 0
    end
    return @atk_size_type
  end
  public :atk_size_type
  #--------------------------------------------------------------------------
  # ? ??????????????????????
  #--------------------------------------------------------------------------
  def atk_tile
    if @atk_tile == nil
      @atk_tile = @note =~ TSRPG::Pattern::ATK_TILE ? true : false
    end
    return @atk_tile
  end
  public :atk_tile
  
  #determine whether skill is teleport
  def teleport
    if @teleport == nil
      @teleport = @note =~ TSRPG::Pattern::TELEPORT ? true : false
    end
    return @teleport
  end
  public :teleport
  #--------------------------------------------------------------------------
  # ? ???????MP???
  #--------------------------------------------------------------------------
  def atk_mp_cost
    if @atk_mp_cost == nil
      @atk_mp_cost = @note =~ TSRPG::Pattern::ATK_MP_COST ? $1.to_i : 0
    end
    return @atk_mp_cost
  end
  public :atk_mp_cost
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def reflect?
    if @reflect == nil
      @reflect = @note =~ TSRPG::Pattern::REFLECT ? true : false
    end
    return @reflect
  end
  public :reflect?
  #--------------------------------------------------------------------------
  # ? ????MP????????
  #--------------------------------------------------------------------------
  def change_damage?
    if @change_damage == nil
      @change_damage = @note =~ TSRPG::Pattern::CHANGE_DAMAGE ? true : false
    end
    return @change_damage
  end
  public :change_damage?
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def donevade?
    if @donevade == nil
      @donevade = @note =~ TSRPG::Pattern::DONEVADE ? true : false
    end
    return @donevade
  end
  public :donevade?
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def zombie?
    if @zombie == nil
      @zombie = @note =~ TSRPG::Pattern::ZOMBIE ? true : false
    end
    return @zombie
  end
  public :zombie?
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def temp_skill
    if @temp_skill == nil
      @temp_skill = []
      if @note =~ TSRPG::Pattern::TEMP_SKILL
        $1.scan(/\d+/).each { |i|
          @temp_skill.push(i.to_i)
        }
      end
    end
    return @temp_skill
  end
  public :temp_skill
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def donback?
    if @donback == nil
      @donback = @note =~ TSRPG::Pattern::DONBACK ? true : false
    end
    return @donback
  end
  public :donback?
  #--------------------------------------------------------------------------
  # ? ???????????
  #update1.008
  #--------------------------------------------------------------------------
  def guts?
    if @guts == nil
      @guts = @note =~ TSRPG::Pattern::GUTS ? true : false
    end
    return @guts
  end
  public :guts?
  
  def regen?
    if @regen == nil
      @regen = @note =~ TSRPG::Pattern::REGEN ? true : false
    end
    return @regen
  end
  public :regen?
end

end

#==============================================================================
# ¦ Game_Interpreter
#==============================================================================
class Game_Interpreter
  include TSRPG::Commands
end

module RPG
#==============================================================================
# ¦ RPG::BaseItem
#==============================================================================
class BaseItem
  include TSRPG::Accessor
  #--------------------------------------------------------------------------
  # ? ??????????????????????
  #--------------------------------------------------------------------------
  def noself?
    return @note =~ TSRPG::Pattern::NOSELF
  end
  #--------------------------------------------------------------------------
  # ? ??????????????????????
  #--------------------------------------------------------------------------
  def noscope?
    return @note =~ TSRPG::Pattern::NOSCOPE
  end
  #--------------------------------------------------------------------------
  # determine whether the skill moves the user to the target
  #--------------------------------------------------------------------------
  def moveself?
    return @note =~ TSRPG::Pattern::MOVE_SELF
  end
  
  def teleport?
    return @note =~ TSRPG::Pattern::TELEPORT
  end

  #--------------------------------------------------------------------------
  # knock back distance
  #--------------------------------------------------------------------------
  def knock_dist
    return @note =~ TSRPG::Pattern::KNOCK_BACK ? $1.to_i : 0
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def nomove?
    return @note =~ TSRPG::Pattern::NOMOVE ? true : false
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #--------------------------------------------------------------------------
  def weapon_skill?
    if @weapon_skill == nil
      @weapon_skill = @note =~ TSRPG::Pattern::WEAPON_SKILL ? true : false
    end
    return @weapon_skill
  end
  #--------------------------------------------------------------------------
  # ? ????????
  #--------------------------------------------------------------------------
  def steal_rate
    if @steal_rate == nil
      @steal_rate = @note =~ TSRPG::Pattern::STEAL_RATE ? $1.to_i : 0
    end
    return @steal_rate
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def pierce?
    if @pierce == nil
      @pierce = @note =~ TSRPG::Pattern::PIERCE ? true : false
    end
    return @pierce
  end
  #--------------------------------------------------------------------------
  # ? ???????????????????
  #update1.009
  #--------------------------------------------------------------------------
  def not_back_attack?
    if @not_back_attack == nil
      @not_back_attack = @note =~ TSRPG::Pattern::NOT_BACK_ATTACK ? true : false
    end
    return @not_back_attack
  end
  #--------------------------------------------------------------------------
  # ? ??????????ID???
  #update1.011
  #--------------------------------------------------------------------------
  def double_anime
    if @double_anime == nil
      @double_anime = @note =~ TSRPG::Pattern::DOUBLE_ANIME ? $1.to_i : 0
    end
    return @double_anime
  end
end
#==============================================================================
# ¦ RPG::State
#==============================================================================
class State
  include TSRPG::Accessor
end
#==============================================================================
# ¦ RPG::Enemy
#==============================================================================
class Enemy
  include TSRPG::Accessor
  #--------------------------------------------------------------------------
  # ? ???????????ID???
  #--------------------------------------------------------------------------
  def atk_animation
    if @animation_id == nil
      @animation_id = @note =~ TSRPG::Pattern::ATK_ANIMATION ? $1.to_i : 1
    end
    return @animation_id
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.011
  #--------------------------------------------------------------------------
  def atk_element
    if @atk_element == nil
      @atk_element = []
      if @note =~ TSRPG::Pattern::ATK_ELEMENT
        $1.scan(/\d+/).each { |i|
          @atk_element.push(i.to_i)
        }
      end
    end
    return @atk_element
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #update1.008
  #--------------------------------------------------------------------------
  def action_max
    if @action_max == nil
      @action_max = @note =~ TSRPG::Pattern::ACTION_MAX ? $1.to_i : 1
    end
    return @action_max
  end
end
end


--------------------------------------------TRts Window Command-----------------------
#==============================================================================
# ¦ TRts_Window_Command
#==============================================================================
class TRts_Window_Command < Window_Command
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def update_help
    case @index
    when 0; text = "Organize Party. Select Members in Order."
    when 1; text = "Go to Battle"
    end
    @help_window.set_text(text)
  end
end

#==============================================================================
# ¦ TRts_Window_Character
#==============================================================================
class TRts_Window_Character < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x      : ?????? X ??
  #     y      : ?????? Y ??
  #     width  : ???????
  #     height : ????????
  #--------------------------------------------------------------------------
  def initialize(x, y, width, height, map_id)
    super(x, y, width, height)
    @column_max = 1
    self.index = -1
    self.active = false
    @map_id = map_id
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     wrap : ??????????
  #--------------------------------------------------------------------------
  def cursor_right(wrap = false)
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #     wrap : ??????????
  #--------------------------------------------------------------------------
  def cursor_left(wrap = false)
  end
  #--------------------------------------------------------------------------
  # ? ??????????ID???
  #--------------------------------------------------------------------------
  def item
    return @data[self.index]
  end
  #--------------------------------------------------------------------------
  # ? ??????????????
  #     item : ??????ID
  #--------------------------------------------------------------------------
  def selected?(item)
    return true if $game_system.srpg_member.include?(item)
    return false
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    @data = []
    for i in $game_party.members do @data.push(i) end
    @item_max = @data.size
    create_contents
    for i in 0...@item_max do draw_item(i) end
  end
  #--------------------------------------------------------------------------
  # ? ?????
  #     index : ????
  #--------------------------------------------------------------------------
  def draw_item(index)
    rect = item_rect(index)
    self.contents.clear_rect(rect)
    actor = @data[index]
    if actor != nil
      if TSRPG::MAP_ACTOR[@map_id] != nil and
         TSRPG::MAP_ACTOR[@map_id].include?(actor.id)
        self.contents.font.color = knockout_color
        self.contents.draw_text(rect, actor.name + "(Required)")
      elsif !TSRPG::BANNED_ACTOR[@map_id].nil? and 
          TSRPG::BANNED_ACTOR[@map_id].include?(actor.id)
          self.contents.font.color = text_color(7)
          self.contents.draw_text(rect, actor.name + "(Out)")
      elsif (actor.id == 1 || actor.id == 2 )   #disallow trainers
          self.contents.font.color = text_color(7)
          self.contents.draw_text(rect, actor.name + "(Out)")
      else
        self.contents.font.color = normal_color
        self.contents.font.color.alpha = selected?(index) ? 255 : 128
        self.contents.draw_text(rect, actor.name)
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def update_help
  end
end

#==============================================================================
# ¦ TRts_Window_Status
#==============================================================================
class TRts_Window_Status < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x     : ?????? X ??
  #     y     : ?????? Y ??
  #--------------------------------------------------------------------------
  def initialize(x, y, map_id)
    super(x, y, 272, 280)
    @map_id = map_id
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    self.contents.clear
    text = $data_mapinfos[@map_id].name
    self.contents.draw_text(4, WLH * 0, 232, WLH, text)
    self.contents.font.color = system_color
    self.contents.draw_text(4, WLH * 1, 232, WLH, "Members")
    self.contents.font.color = normal_color
    text = sprintf("%d / %d", $game_system.srpg_member.size, $scene.member_max)
    self.contents.draw_text(4, WLH * 1, 232, WLH, text, 2)
  end
end

#==============================================================================
# ¦ Scene_SrpgEdit
#==============================================================================
class Scene_SrpgEdit < Scene_Base
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  attr_reader :member_max
  #--------------------------------------------------------------------------
  # ? ?????????
  #--------------------------------------------------------------------------
  def initialize(map_id, member_max)
    @map_id = map_id
    @member_max = member_max
  end
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def start
    super
    $game_system.srpg_member = []       # ????????
    # ???ID?????????????????????
    if TSRPG::MAP_ACTOR[@map_id] != nil
      for i in 0...$game_party.members.size
        if TSRPG::MAP_ACTOR[@map_id].include?($game_party.members[i].id)
          $game_system.srpg_member.push(i)
        end
      end
    end
    create_menu_background            # ?????
    @help_window = Window_Help.new
    create_command_window
    @character_window = TRts_Window_Character.new(272, 56, 272, 360, @map_id)
    @character_window.help_window = @help_window
    @status_window = TRts_Window_Status.new(0, 136, @map_id)
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def create_command_window
    s1 = "Party"
    s2 = "Battle"
    @command_window = TRts_Window_Command.new(272, [s1, s2])
    @command_window.index = 0
    @command_window.y = 56
    @command_window.active = true
    @command_window.help_window = @help_window
  end
  #--------------------------------------------------------------------------
  # ? ????
  #--------------------------------------------------------------------------
  def terminate
    super
    dispose_menu_background
    @help_window.dispose
    @command_window.dispose
    @character_window.dispose
    @status_window.dispose
    @actor_window.dispose if @actor_window != nil
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def update
    super
    update_menu_background
    @help_window.update
    @status_window.update
    if @actor_window != nil
      update_actor_selection
    elsif @character_window.active
      update_character_selection
    else
      update_command_selection
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????????
  #--------------------------------------------------------------------------
  def update_character_selection
    @character_window.update
    if Input.trigger?(Input::A)   # ????????????
      Sound.play_decision
      @character_window.active = false
      @actor_window = Window_Status.new($game_party.members[@character_window.index])
    elsif Input.trigger?(Input::B)
      Sound.play_cancel
      @command_window.active = true
      @character_window.active = false
      @character_window.index = -1
    elsif Input.trigger?(Input::C)
      if $game_system.srpg_member.include?(@character_window.index)
        # ??????????????????????????????
        if TSRPG::MAP_ACTOR[@map_id] != nil and
           TSRPG::MAP_ACTOR[@map_id].include?($game_party.members[@character_window.index].id)
          Sound.play_buzzer
        else
          Sound.play_cancel
          $game_system.srpg_member.delete(@character_window.index)
        end
      else
        # ???????????????????
        if $game_system.srpg_member.size == @member_max
          Sound.play_buzzer
        elsif TSRPG::BANNED_ACTOR[@map_id] != nil and
           TSRPG::BANNED_ACTOR[@map_id].include?($game_party.members[@character_window.index].id)
           Sound.play_buzzer
        elsif (($game_party.members[@character_window.index].id == 1) || ($game_party.members[@character_window.index].id == 2))
           Sound.play_buzzer
        else
          Sound.play_decision
          $game_system.srpg_member.push(@character_window.index)
        end
      end
      # ????????
      @character_window.refresh
      @status_window.refresh
    end
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def update_command_selection
    @command_window.update
    if Input.trigger?(Input::B)
      Sound.play_buzzer
    elsif Input.trigger?(Input::C)
      case @command_window.index
      when 0    # Select participating members
        Sound.play_decision
        @command_window.active = false
        @character_window.active = true
        @character_window.index = 0
      when 1    # Battle
        if ($game_system.srpg_member.size >= TSRPG::PARTY_MINIMUM || 
          (TSRPG::MIN_EXCEPTION.include?(@map_id)) && $game_system.srpg_member.size > 0)
          Sound.play_decision
          $game_srpg.setup(@map_id)
          $scene = Scene_Srpg.new
          return
        else
          @help_window.set_text("You must bring at least one Pokemon to battle!")
          Sound.play_buzzer
        end
      end
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #--------------------------------------------------------------------------
  def update_actor_selection
    if Input.trigger?(Input::B) or Input.trigger?(Input::C)
      Sound.play_cancel
      @actor_window.dispose
      @actor_window = nil
      @character_window.active = true
    elsif Input.trigger?(Input::L)    # L????????
      Sound.play_cursor
      @character_window.index -= 1
      if @character_window.index < 0
        @character_window.index = $game_party.members.size - 1
      end
      @actor_window.dispose
      @actor_window = Window_Status.new($game_party.members[@character_window.index])
    elsif Input.trigger?(Input::R)    # R????????
      Sound.play_cursor
      @character_window.index += 1
      if @character_window.index >= $game_party.members.size
        @character_window.index = 0
      end
      @actor_window.dispose
      @actor_window = Window_Status.new($game_party.members[@character_window.index])
    end
  end
end


--------------------------------Status Window --------------------------------------
#==============================================================================
# ¦ Window_MenuStatus
#==============================================================================
class Window_MenuStatus < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def top_row
    return self.oy / 96
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #     row : ????????
  #--------------------------------------------------------------------------
  def top_row=(row)
    self.oy = [[row, 0].max, row_max - 1].min * 96
  end
  #--------------------------------------------------------------------------
  # ? 1 ??????????????
  #--------------------------------------------------------------------------
  def page_row_max
    return (self.height - 32) / 96
  end
  #--------------------------------------------------------------------------
  # ? ????????????
  #     index : ????
  #--------------------------------------------------------------------------
  def item_rect(index)
    rect = Rect.new(0, 0, 0, 0)
    rect.width = (contents.width + @spacing) / @column_max - @spacing
    rect.height = 96
    rect.x = index % @column_max * (rect.width + @spacing)
    rect.y = index / @column_max * 96
    return rect
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  alias tsrpg_window_menustatus_refresh refresh
  def refresh
    self.contents.dispose
    self.contents = Bitmap.new(width - 32, $game_party.members.size * 96)
    tsrpg_window_menustatus_refresh
  end
  #--------------------------------------------------------------------------
  # ? ???????
  #--------------------------------------------------------------------------
  def update_cursor
    super
  end
end

#==============================================================================
# ¦ Window_EquipItem
#==============================================================================
class Window_EquipItem < Window_Item
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    @column_max = 1
    super
  end
end

#==============================================================================
# ¦ Window_EquipStatus
#==============================================================================
class Window_EquipStatus < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????
  #     x     : ?????? X ??
  #     y     : ?????? Y ??
  #     actor : ????
  #--------------------------------------------------------------------------
  def initialize(x, y, actor)
    super(x, y, 208, 360)
    @actor = actor
    refresh
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #--------------------------------------------------------------------------
  def refresh
    self.contents.clear
    draw_actor_name(@actor, 4, 0)
    for i in 0..8 do draw_parameter(0, WLH * (i + 1), i) end
  end
  #--------------------------------------------------------------------------
  # ? ???????????
  #     temp_actor : ?????????????
  #--------------------------------------------------------------------------
  def set_new_parameters(new_atk, new_def, new_spi, new_agi, new_counter,
        new_coop, new_hit, new_eva, new_cri)
    if @new_atk != new_atk or @new_def != new_def or @new_spi != new_spi or
       @new_agi != new_agi or @new_counter != new_counter or
       @new_coop != new_coop or @new_hit != new_hit or
       @new_eva != new_eva or @new_cri != new_cri
      @new_atk = new_atk
      @new_def = new_def
      @new_spi = new_spi
      @new_agi = new_agi
      @new_counter = new_counter
      @new_coop = new_coop
      @new_hit = new_hit
      @new_eva = new_eva
      @new_cri = new_cri
      refresh
    end
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #     x    : ??? X ??
  #     y    : ??? Y ??
  #     type : ?????? (0~3)
  #--------------------------------------------------------------------------
  def draw_parameter(x, y, type)
    case type
    when 0
      name = Vocab::atk
      value = @actor.atk
      new_value = @new_atk
    when 1
      name = Vocab::def
      value = @actor.def
      new_value = @new_def
    when 2
      name = Vocab::spi
      value = @actor.spi
      new_value = @new_spi
    when 3
      name = Vocab::agi
      value = @actor.agi
      new_value = @new_agi
    when 4
      name = Vocab::counter
      value = @actor.counter_power
      new_value = @new_counter
    when 5
      name = Vocab::coop
      value = @actor.coop_power
      new_value = @new_coop
    when 6
      name = Vocab::hit
      value = @actor.hit
      new_value = @new_hit
    when 7
      name = Vocab::eva
      value = @actor.eva
      new_value = @new_eva
    when 8
      name = Vocab::cri
      value = @actor.cri
      new_value = @new_cri
    end
    self.contents.font.color = system_color
    self.contents.draw_text(x + 4, y, 80, WLH, name)
    self.contents.font.color = normal_color
    self.contents.draw_text(x + 90, y, 30, WLH, value, 2)
    self.contents.font.color = system_color
    self.contents.draw_text(x + 122, y, 20, WLH, ">", 1)
    if new_value != nil
      self.contents.font.color = new_parameter_color(value, new_value)
      self.contents.draw_text(x + 142, y, 30, WLH, new_value, 2)
    end
  end
end

#==============================================================================
# ¦ Window_Status
#==============================================================================
class Window_Status < Window_Base
  #--------------------------------------------------------------------------
  # ? ??????
  #     actor : ????
  #     x     : ??? X ??
  #     y     : ??? Y ??
  #     type  : ?????? (0~3)
  #--------------------------------------------------------------------------
  def draw_actor_parameter(actor, x, y, type)
    case type
    when 0
      parameter_name = Vocab::atk
      parameter_value = actor.atk
    when 1
      parameter_name = Vocab::def
      parameter_value = actor.def
    when 2
      parameter_name = Vocab::spi
      parameter_value = actor.spi
    when 3
      parameter_name = Vocab::agi
      parameter_value = actor.agi
    when 4
      parameter_name = Vocab::counter
      parameter_value = actor.counter_power
    when 5
      parameter_name = Vocab::coop
      parameter_value = actor.coop_power
    when 6
      parameter_name = Vocab::hit
      parameter_value = actor.hit
    when 7
      parameter_name = Vocab::eva
      parameter_value = actor.eva
    when 8
      parameter_name = Vocab::cri
      parameter_value = actor.cri
    end
    self.contents.font.color = system_color
    self.contents.draw_text(x, y, 120, WLH, parameter_name)
    self.contents.font.color = normal_color
    self.contents.draw_text(x + 120, y, 36, WLH, parameter_value, 2)
  end
  #--------------------------------------------------------------------------
  # ? ??????
  #     x : ??? X ??
  #     y : ??? Y ??
  #--------------------------------------------------------------------------
  def draw_parameters(x, y)
    for i in 0..8 do draw_actor_parameter(@actor, x, y + WLH * i, i) end
  end
end

#==============================================================================
# ¦ Window_ShopStatus
#==============================================================================
class Window_ShopStatus < Window_Base
  #--------------------------------------------------------------------------
  # ? ?????????????????
  #     actor : ????
  #     x     : ??? X ??
  #     y     : ??? Y ??
  #--------------------------------------------------------------------------
  def draw_actor_parameter_change(actor, x, y)
    return if @item.is_a?(RPG::Item)
    y = WLH * (actor.index + 2)
    enabled = actor.equippable?(@item)
    self.contents.font.color = normal_color
    self.contents.font.color.alpha = enabled ? 255 : 128
    self.contents.draw_text(x + 24, y, 176, WLH, actor.name)
    if @item.is_a?(RPG::Weapon)
      item1 = weaker_weapon(actor)
    elsif actor.two_swords_style and @item.kind == 0
      item1 = nil
    else
      item1 = actor.equips[1 + @item.kind]
    end
    if enabled
      if @item.is_a?(RPG::Weapon)
        atk1 = item1 == nil ? 0 : item1.atk
        atk2 = @item == nil ? 0 : @item.atk
        change = atk2 - atk1
      else
        def1 = item1 == nil ? 0 : item1.def
        def2 = @item == nil ? 0 : @item.def
        change = def2 - def1
      end
      self.contents.draw_text(x, y, 200, WLH, sprintf("%+d", change), 2)
    end
    draw_icon(item1.icon_index, x, y, enabled) if item1 != nil
  end
end

#==============================================================================
# ¦ Scene_Equip
#==============================================================================
class Scene_Equip < Scene_Base
  #--------------------------------------------------------------------------
  # ? ????????????
  #--------------------------------------------------------------------------
  def create_item_windows
    @item_windows = []
    for i in 0...EQUIP_TYPE_MAX
      @item_windows[i] = Window_EquipItem.new(208, 208, 336, 208, @actor, i)
      @item_windows[i].help_window = @help_window
      @item_windows[i].visible = (@equip_index == i)
      @item_windows[i].y = 208
      @item_windows[i].height = 208
      @item_windows[i].active = false
      @item_windows[i].index = -1
    end
  end
  #--------------------------------------------------------------------------
  # ? ?????????????
  #--------------------------------------------------------------------------
  def update_status_window
    if @equip_window.active
      @status_window.set_new_parameters(nil, nil, nil, nil, nil, nil, nil, nil, nil)
    elsif @item_window.active
      temp_actor = @actor.clone
      temp_actor.change_equip(@equip_window.index, @item_window.item, true)
      new_atk = temp_actor.atk
      new_def = temp_actor.def
      new_spi = temp_actor.spi
      new_agi = temp_actor.agi
      new_counter = temp_actor.counter_power
      new_coop    = temp_actor.coop_power
      new_hit = temp_actor.hit
      new_eva = temp_actor.eva
      new_cri = temp_actor.cri
      @status_window.set_new_parameters(new_atk, new_def, new_spi, new_agi,
        new_counter, new_coop, new_hit, new_eva, new_cri)
    end
    @status_window.update
  end
end


----------------------------------Custom methods-------------------------------------
class MyClass
  def moveCameraToEvent(eventId)
    #p "Some message"
    #$game_map.start_scroll(1, 4, 4)
    xDirection=0
    yDirection=0
    for event in $game_map.events.values
      #p event.id
      if event.id == eventId
        if $game_player.y > event.y
          yDirection = 8
        else
          yDirection = 2
        end
        yDiff = $game_player.y-event.y        
        $game_map.start_scroll(yDirection, yDiff.abs, 4)
        while $game_map.scrolling? do
        end
        if $game_player.x > event.x
          xDirection = 4
        else
          xDirection = 6
        end
        xDiff = $game_player.x-event.x        
        $game_map.start_scroll(xDirection, xDiff.abs, 4)
      end
    end
  end
  def scrollBoth()
    $game_map.scroll_down(4)
    $game_map.scroll_right(4)
  end
end

class CasinoClass
  def initialize
    @reds=[1, 3, 5, 7, 9, 12,14, 16, 18, 19, 21, 23,25, 27, 30, 32, 34, 36]
    @blacks=[2, 4, 6, 8, 10, 11,13, 15, 17, 20, 22, 24,26, 28, 29, 31, 33, 35]
  end
  #0 : green
  #1: red
  #2: black
  def roulette(color, bet)
    result = rand(36) #draw a random number from 0 to 36 inclusive
    
    #modify result based on karma
    if $game_variables[37] > 1 #if there's been more than 1 red in a row
      modifier = ($game_variables[37]-1)+10 #ex if 2 reds in a row, add a 10% chance to go to black
      if modifier > rand(100)
        #p "modifying results to black"
        result = @blacks[rand(@blacks.length)] #pick something from the blacks
      end
    elsif $game_variables[39] > 1 #if there's been more than 1 black in a row
      modifier = ($game_variables[39]-1)+10 #ex if 2 blacks in a row, add a 10% chance to go to red
      if modifier > rand(100)
        #p "modifying results to red"
        result = @reds[rand(@reds.length)] #pick something from the reds
      end
    end
   
    if @reds.include?(result) #if ball drops in red
       $game_variables[38] = "Red "+result.to_s
       $game_variables[37] += 1
       $game_variables[39] = 0
       if (color == 1)
         $game_variables[40] = "You won "+(bet*2).to_s+" chips!"
         $game_variables[41] += bet*2
       else
         $game_variables[40] = "You lost..."
         return 0
       end
     elsif @blacks.include?(result)
       $game_variables[38] = "Black "+result.to_s
       $game_variables[37] = 0
       $game_variables[39] += 1
       if (color == 2)
         $game_variables[40] = "You won "+(bet*2).to_s+" chips!"
         $game_variables[41] += bet*2
       else
         $game_variables[40] = "You lost..."
         return 0
       end
     else
       $game_variables[38] = "Double 00!"
       $game_variables[37] = 0
       $game_variables[39] = 0
       if (color == 0)
         $game_variables[40] = "You won "+(bet*36).to_s+" chips!"
         $game_variables[41] += bet*36
       else
         $game_variables[40] = "You lost..."
         return 0
       end
    end
      
  end
end